{"version":3,"sources":["../../../api/controllers/adminController.js"],"names":["exports","getAllRequests","req","res","sql","text","db","query","err","result","status","json","end","user","userInfo","rows","approveRequest","id","parseInt","params","requestId","values","length","disapproveRequest","resolveRequest"],"mappings":";;AAAA;;;;;;AAEAA,QAAQC,cAAR,GAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrC,MAAMC,MAAM;AACVC,UAAM;AADI,GAAZ;AAGAC,sBAAGC,KAAH,CAASH,GAAT,EAAc,UAACI,GAAD,EAAMC,MAAN,EAAiB;AAC7B,QAAID,GAAJ,EAAS;AACP,aAAOL,IAAIO,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJH;AADI,OADD,EAIJI,GAJI,EAAP;AAKD;AACDT,QAAIO,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ;AACJE,YAAMX,IAAIY,QADN;AAEJL,cAAQA,OAAOM;AAFX,KADR;AAKD,GAbD;AAcD,CAlBD;;AAoBAf,QAAQgB,cAAR,GAAyB,UAACd,GAAD,EAAMC,GAAN,EAAc;AACrC,MAAMc,KAAKC,SAAShB,IAAIiB,MAAJ,CAAWC,SAApB,EAA+B,EAA/B,CAAX;AACA,MAAMb,QAAQ;AACZF,UAAM,uDADM;AAEZgB,YAAQ,CAAC,UAAD,EAAaJ,EAAb;AAFI,GAAd;AAIAX,sBAAGC,KAAH,CAASA,KAAT,EAAgB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC/B,QAAID,GAAJ,EAAS;AACP,aAAOL,IAAIO,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJH;AADI,OADD,CAAP;AAID;AACD,QAAIC,OAAOM,IAAP,CAAYO,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,aAAOnB,IAAIO,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJF,gBAAQA,OAAOM;AADX,OADD,CAAP;AAID;AACF,GAbD;AAcD,CApBD;;AAsBAf,QAAQuB,iBAAR,GAA4B,UAACrB,GAAD,EAAMC,GAAN,EAAc;AACxC,MAAMc,KAAKC,SAAShB,IAAIiB,MAAJ,CAAWC,SAApB,EAA+B,EAA/B,CAAX;AACA,MAAMb,QAAQ;AACZF,UAAM,uDADM;AAEZgB,YAAQ,CAAC,aAAD,EAAgBJ,EAAhB;AAFI,GAAd;AAIAX,sBAAGC,KAAH,CAASA,KAAT,EAAgB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC/B,QAAID,GAAJ,EAAS;AACP,aAAOL,IAAIO,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJH;AADI,OADD,CAAP;AAID;AACD,QAAIC,OAAOM,IAAP,CAAYO,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,aAAOnB,IAAIO,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJF,gBAAQA,OAAOM;AADX,OADD,CAAP;AAID;AACF,GAbD;AAcD,CApBD;;AAsBAf,QAAQwB,cAAR,GAAyB,UAACtB,GAAD,EAAMC,GAAN,EAAc;AACrC,MAAMc,KAAKC,SAAShB,IAAIiB,MAAJ,CAAWC,SAApB,EAA+B,EAA/B,CAAX;AACA,MAAMb,QAAQ;AACZF,UAAM,uDADM;AAEZgB,YAAQ,CAAC,UAAD,EAAaJ,EAAb;AAFI,GAAd;AAIAX,sBAAGC,KAAH,CAASA,KAAT,EAAgB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC/B,QAAID,GAAJ,EAAS;AACP,aAAOL,IAAIO,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJH;AADI,OADD,CAAP;AAID;AACD,QAAIC,OAAOM,IAAP,CAAYO,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,aAAOnB,IAAIO,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJF,gBAAQA,OAAOM;AADX,OADD,CAAP;AAID;AACF,GAbD;AAcD,CApBD","file":"adminController.js","sourcesContent":["import db from '../models/userModel';\r\n\r\nexports.getAllRequests = (req, res) => {\r\n  const sql = {\r\n    text: 'SELECT * FROM requests ORDER BY date DESC',\r\n  };\r\n  db.query(sql, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        })\r\n        .end();\r\n    }\r\n    res.status(200)\r\n      .json({\r\n        user: req.userInfo,\r\n        result: result.rows,\r\n      });\r\n  });\r\n};\r\n\r\nexports.approveRequest = (req, res) => {\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET status=$1 WHERE id=$2 RETURNING *',\r\n    values: ['approved', id],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rows.length > 0) {\r\n      return res.status(200)\r\n        .json({\r\n          result: result.rows,\r\n        });\r\n    }\r\n  });\r\n};\r\n\r\nexports.disapproveRequest = (req, res) => {\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET status=$1 WHERE id=$2 RETURNING *',\r\n    values: ['disapproved', id],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rows.length > 0) {\r\n      return res.status(200)\r\n        .json({\r\n          result: result.rows,\r\n        });\r\n    }\r\n  });\r\n};\r\n\r\nexports.resolveRequest = (req, res) => {\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET status=$1 WHERE id=$2 RETURNING *',\r\n    values: ['resolved', id],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rows.length > 0) {\r\n      return res.status(200)\r\n        .json({\r\n          result: result.rows,\r\n        });\r\n    }\r\n  });\r\n};\r\n"]}