{"version":3,"sources":["../../../api/controllers/userController.js"],"names":["validateEmail","email","re","test","exports","signUp","req","res","body","name","password","trim","status","json","error","length","sql","text","values","user","query","err","result","rows","bcrypt","hash","rowCount","token","jwt","sign","id","process","env","JWT_KEY","expiresIn","auth","end","login","compare","match","admin"],"mappings":"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","file":"userController.js","sourcesContent":["import bcrypt from 'bcrypt';\r\n\r\nimport jwt from 'jsonwebtoken';\r\n\r\nimport user from '../models/userModel';\r\n\r\nconst validateEmail = (email) => {\r\n  const re = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n  return re.test(email);\r\n};\r\nexports.signUp = (req, res) => {\r\n  const { name, email, password } = req.body;\r\n  if (name.trim() === '' || typeof name !== 'string') {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'Name is required and must be a string value',\r\n      });\r\n  } else if (email.trim() === '' || !validateEmail(email)) {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'A valid email is required',\r\n      });\r\n  } else if (password.trim() === '' || password.length >= 8 || password.length <= 4) {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'Password is required and must be less than 8 characters or greater than 4 characters',\r\n      });\r\n  }\r\n  const sql = {\r\n    text: 'SELECT * FROM users WHERE email= $1',\r\n    values: [email],\r\n  };\r\n  user.query(sql, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rows.length > 0) {\r\n      return res.status(409)\r\n        .json({\r\n          error: 'Email already exists',\r\n        });\r\n    }\r\n    bcrypt.hash(password, 10, (err, hash) => {\r\n      if (err) {\r\n        return res.status(500)\r\n          .json({\r\n            err,\r\n          });\r\n      }\r\n      const query = {\r\n        text: 'INSERT INTO users(email, name, password, admin) VALUES($1, $2, $3, $4 ) RETURNING id',\r\n        values: [email, name, hash, false],\r\n      };\r\n      user.query(query, (err, result) => {\r\n        if (err) {\r\n          return res.status(500)\r\n            .json({\r\n              err,\r\n            });\r\n        }\r\n        if (result.rowCount === 1) {\r\n          const token = jwt.sign({\r\n            id: result.rows[0].id,\r\n            email,\r\n            name,\r\n          }, process.env.JWT_KEY, {\r\n            expiresIn: '1hr',\r\n          });\r\n          res.status(201)\r\n            .json({\r\n              auth: true,\r\n              token,\r\n            })\r\n            .end();\r\n        }\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\n\r\nexports.login = (req, res) => {\r\n  const { email, password } = req.body;\r\n  if (email.trim() === '' || !validateEmail(email)) {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'A valid email is required',\r\n      });\r\n  } else if (password.trim() === '' || password.length >= 8 || password.length <= 4) {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'Password is required and must be less than 8 characters or greater than 4 characters',\r\n      });\r\n  }\r\n  const sql = {\r\n    text: 'SELECT * FROM users WHERE email= $1',\r\n    values: [email],\r\n  };\r\n  user.query(sql, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        })\r\n        .end();\r\n    }\r\n    if (result && result.rows.length === 1) {\r\n      bcrypt.compare(password, result.rows[0].password, (error, match) => {\r\n        if (error) throw error;\r\n        if (match) {\r\n          const token = jwt.sign({\r\n            id: result.rows[0].id,\r\n            email: result.rows[0].email,\r\n            name: result.rows[0].name,\r\n            admin: result.rows[0].admin,\r\n          }, process.env.JWT_KEY, {\r\n            expiresIn: '1h',\r\n          });\r\n          res.status(200)\r\n            .json({\r\n              auth: true,\r\n              token,\r\n            })\r\n            .end();\r\n        } else {\r\n          res.status(401)\r\n            .json({\r\n              error: 'Login Authentication failed',\r\n            })\r\n            .end();\r\n        }\r\n      });\r\n    } else {\r\n      res.status(401)\r\n        .json({\r\n          error: 'Login Authentication Failed',\r\n        })\r\n        .end();\r\n    }\r\n  });\r\n};\r\n"]}