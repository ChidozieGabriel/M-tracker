{"version":3,"sources":["../../../api/controllers/userController.js"],"names":["exports","signUp","req","res","body","name","email","password","Joi","validate","signUpValidation","err","value","sql","text","values","user","query","result","rows","length","status","json","error","bcrypt","hash","rowCount","token","jwt","sign","id","process","env","JWT_KEY","expiresIn","auth","end","details","message","login","loginValidation","compare","match","admin"],"mappings":"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","file":"userController.js","sourcesContent":["import bcrypt from 'bcrypt';\r\n\r\nimport jwt from 'jsonwebtoken';\r\n\r\nimport Joi from 'joi';\r\n\r\nimport user from '../models/userModel';\r\n\r\nimport { signUpValidation, loginValidation } from '../includes/validations';\r\n\r\nexports.signUp = (req, res) => {\r\n  const { name, email, password } = req.body;\r\n  Joi.validate({\r\n    name,\r\n    email,\r\n    password,\r\n  }, signUpValidation, (err, value) => {\r\n    if (err === null) {\r\n      const sql = {\r\n        text: 'SELECT * FROM users WHERE email= $1',\r\n        values: [value.email],\r\n      };\r\n      user.query(sql, (err, result) => {\r\n        if (result.rows.length > 0) {\r\n          return res.status(409)\r\n            .json({\r\n              error: 'Email already exists',\r\n            });\r\n        }\r\n        bcrypt.hash(password, 10, (err, hash) => {\r\n          const query = {\r\n            text: 'INSERT INTO users(email, name, password, admin) VALUES($1, $2, $3, $4 ) RETURNING *',\r\n            values: [value.email, value.name, hash, false],\r\n          };\r\n          user.query(query, (err, result) => {\r\n            if (result.rowCount === 1) {\r\n              const token = jwt.sign({\r\n                id: result.rows[0].id,\r\n                email: result.rows[0].email,\r\n                name: result.rows[0].name,\r\n              }, process.env.JWT_KEY, {\r\n                expiresIn: '1hr',\r\n              });\r\n              res.status(201)\r\n                .json({\r\n                  auth: true,\r\n                  token,\r\n                })\r\n                .end();\r\n            }\r\n          });\r\n        });\r\n      });\r\n    } else {\r\n      res.status(400)\r\n        .json({\r\n          error: err.details[0].message,\r\n        });\r\n    }\r\n  });\r\n};\r\n\r\n\r\nexports.login = (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  Joi.validate({\r\n    email,\r\n    password,\r\n  }, loginValidation, (err, value) => {\r\n    if (err === null) {\r\n      const sql = {\r\n        text: 'SELECT * FROM users WHERE email= $1',\r\n        values: [value.email],\r\n      };\r\n      user.query(sql, (err, result) => {\r\n        if (result && result.rows.length === 1) {\r\n          bcrypt.compare(password, result.rows[0].password, (error, match) => {\r\n            if (match) {\r\n              const token = jwt.sign({\r\n                id: result.rows[0].id,\r\n                email: result.rows[0].email,\r\n                name: result.rows[0].name,\r\n                admin: result.rows[0].admin,\r\n              }, process.env.JWT_KEY, {\r\n                expiresIn: '1h',\r\n              });\r\n              res.status(200)\r\n                .json({\r\n                  auth: true,\r\n                  token,\r\n                })\r\n                .end();\r\n            } else {\r\n              res.status(401)\r\n                .json({\r\n                  error: 'Login Authentication failed',\r\n                })\r\n                .end();\r\n            }\r\n          });\r\n        } else {\r\n          res.status(401)\r\n            .json({\r\n              error: 'User not found',\r\n            })\r\n            .end();\r\n        }\r\n      });\r\n    } else {\r\n      res.status(400)\r\n        .json({\r\n          error: err.details[0].message,\r\n        });\r\n    }\r\n  });\r\n};\r\n"]}