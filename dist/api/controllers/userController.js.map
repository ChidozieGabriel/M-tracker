{"version":3,"sources":["../../../api/controllers/userController.js"],"names":["exports","signUp","req","res","body","name","email","password","sql","text","values","user","query","err","result","status","json","rows","length","message","bcrypt","hash","rowCount","token","jwt","sign","id","process","env","JWT_KEY","expiresIn","set","end","login","compare","match","admin","error"],"mappings":"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","file":"userController.js","sourcesContent":["import bcrypt from 'bcrypt';\r\n\r\nimport jwt from 'jsonwebtoken';\r\n\r\nimport user from '../models/userModel';\r\n\r\n\r\nexports.signUp = (req, res) => {\r\n  const { name, email, password } = req.body;\r\n\r\n  const sql = {\r\n    text: 'SELECT * FROM users WHERE email= $1',\r\n    values: [email],\r\n  };\r\n  user.query(sql, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rows.length > 0) {\r\n      return res.status(409)\r\n        .json({\r\n          message: 'Email already exists',\r\n        });\r\n    }\r\n    bcrypt.hash(password, 10, (err, hash) => {\r\n      if (err) {\r\n        return res.status(500)\r\n          .json({\r\n            err,\r\n          });\r\n      }\r\n      // const password = hash;\r\n      const query = {\r\n        text: 'INSERT INTO users(email, name, password, admin) VALUES($1, $2, $3, $4 ) RETURNING id',\r\n        values: [email, name, hash, false],\r\n      };\r\n      user.query(query, (err, result) => {\r\n        if (err) {\r\n          return res.status(500)\r\n            .json({\r\n              err,\r\n            });\r\n        }\r\n        if (result.rowCount === 1) {\r\n          // Create token\r\n          const token = jwt.sign({\r\n            id: result.rows[0].id,\r\n            email,\r\n            name,\r\n          }, process.env.JWT_KEY, {\r\n            expiresIn: '1hr',\r\n          });\r\n          res.set('Access-Control-Allow-Origin', '*');\r\n          res.status(201)\r\n            .json({\r\n              token,\r\n            })\r\n            .end();\r\n        }\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nexports.login = (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  const sql = {\r\n    text: 'SELECT * FROM users WHERE email= $1',\r\n    values: [email],\r\n  };\r\n\r\n  user.query(sql, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        })\r\n        .end();\r\n    }\r\n    // res.json(result.rows.length);\r\n    if (result && result.rows.length === 1) {\r\n      bcrypt.compare(password, result.rows[0].password, (err, match) => {\r\n        if (match) {\r\n          // Create token\r\n          const token = jwt.sign({\r\n            id: result.rows[0].id,\r\n            email: result.rows[0].email,\r\n            name: result.rows[0].name,\r\n            admin: result.rows[0].admin,\r\n          }, process.env.JWT_KEY, {\r\n            expiresIn: '1h',\r\n          });\r\n          res.set('Access-Control-Allow-Origin', '*');\r\n          res.status(200)\r\n            .json({\r\n              token,\r\n            })\r\n            .end();\r\n        }\r\n      });\r\n    } else {\r\n      res.status(401)\r\n        .json({\r\n          error: 'Login Authentication Failed',\r\n          email,\r\n          password,\r\n        })\r\n        .end();\r\n    }\r\n  });\r\n};\r\n"]}