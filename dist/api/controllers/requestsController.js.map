{"version":3,"sources":["../../../api/controllers/requestsController.js"],"names":["validateEmail","email","re","test","exports","getAllUserRequests","req","res","userId","userInfo","id","sql","text","values","db","query","err","result","status","json","user","rows","getSingleRequest","parseInt","params","requestId","error","end","length","message","createRequest","body","name","trim","dept","request","modifyRequest","response","rowCount","deleteRequest","getAllRequests","approveRequest","disapproveRequest","resolveRequest"],"mappings":";;AAAA;;;;;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,MAAMC,KAAK,uIAAX;AACA,SAAOA,GAAGC,IAAH,CAAQF,KAAR,CAAP;AACD,CAHD;;AAMAG,QAAQC,kBAAR,GAA6B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzC,MAAMC,SAASF,IAAIG,QAAJ,CAAaC,EAA5B;AACA,MAAMC,MAAM;AACVC,UAAM,yDADI;AAEVC,YAAQ,CAACL,MAAD;AAFE,GAAZ;AAIAM,sBAAGC,KAAH,CAASJ,GAAT,EAAc,UAACK,GAAD,EAAMC,MAAN,EAAiB;AAC7BV,QAAIW,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ;AACJC,YAAMd,IAAIG,QADN;AAEJQ,cAAQA,OAAOI;AAFX,KADR;AAKD,GAND;AAOD,CAbD;;AAeAjB,QAAQkB,gBAAR,GAA2B,UAAChB,GAAD,EAAMC,GAAN,EAAc;AACvC,MAAMC,SAASF,IAAIG,QAAJ,CAAaC,EAA5B;AACA,MAAMA,KAAKa,SAASjB,IAAIkB,MAAJ,CAAWC,SAApB,EAA+B,EAA/B,CAAX;AACA,MAAMd,MAAM;AACVC,UAAM,mEADI;AAEVC,YAAQ,CAACH,EAAD,EAAKF,MAAL;AAFE,GAAZ;AAIAM,sBAAGC,KAAH,CAASJ,GAAT,EAAc,UAACK,GAAD,EAAMC,MAAN,EAAiB;AAC7B,QAAID,GAAJ,EAAS;AACP,aAAOT,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJO,eAAOV;AADH,OADD,EAIJW,GAJI,EAAP;AAKD;AACD,QAAIV,OAAOI,IAAP,CAAYO,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,aAAOrB,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJF,gBAAQA,OAAOI;AADX,OADD,CAAP;AAID;AACDd,QAAIW,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ;AACJU,eAAS;AADL,KADR;AAID,GAlBD;AAmBD,CA1BD;;AA4BAzB,QAAQ0B,aAAR,GAAwB,UAACxB,GAAD,EAAMC,GAAN,EAAc;AACpC,MAAKD,IAAIyB,IAAJ,CAASC,IAAV,CAAgBC,IAAhB,OAA2B,EAA3B,IAAiC,OAAO3B,IAAIyB,IAAJ,CAASC,IAAhB,KAAyB,QAA9D,EAAwE;AACtE,WAAOzB,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJO,aAAO;AADH,KADD,CAAP;AAID,GALD,MAKO,IAAKpB,IAAIyB,IAAJ,CAASG,IAAV,CAAgBD,IAAhB,OAA2B,EAA3B,IAAiC,OAAO3B,IAAIyB,IAAJ,CAASG,IAAhB,KAAyB,QAA9D,EAAwE;AAC7E,WAAO3B,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJO,aAAO;AADH,KADD,CAAP;AAID,GALM,MAKA,IAAKpB,IAAIyB,IAAJ,CAASI,OAAV,CAAmBF,IAAnB,OAA8B,EAA9B,IAAoC3B,IAAIyB,IAAJ,CAASI,OAAT,CAAiBP,MAAjB,IAA2B,GAA/D,IAAsEtB,IAAIyB,IAAJ,CAASI,OAAT,CAAiBP,MAAjB,IAA2B,EAArG,EAAyG;AAC9G,WAAOrB,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJO,aAAO;AADH,KADD,CAAP;AAID;AACD,MAAMlB,SAASF,IAAIG,QAAJ,CAAaC,EAA5B;AACA,MAAMK,QAAQ;AACZH,UAAM,mIADM;AAEZC,YAAQ,CAACL,MAAD,EAASF,IAAIyB,IAAJ,CAASC,IAAlB,EAAwB1B,IAAIG,QAAJ,CAAaR,KAArC,EAA4C,SAA5C,EAAuDK,IAAIyB,IAAJ,CAASI,OAAhE,EAAyE7B,IAAIyB,IAAJ,CAASG,IAAlF;AAFI,GAAd;AAIApB,sBAAGC,KAAH,CAASA,KAAT,EAAgB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC/B,QAAID,GAAJ,EAAS;AACP,aAAOT,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJH;AADI,OADD,CAAP;AAID;AACDT,QAAIW,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ;AACJU,eAAS;AADL,KADR;AAIA,QAAIvB,IAAIyB,IAAJ,CAASC,IAAT,IAAiB1B,IAAIyB,IAAJ,CAAS9B,KAAT,KAAmB,IAAxC,EAA8C;AAC5CM,UAAIW,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ;AACJU,iBAAS;AADL,OADR;AAID;AACF,GAjBD;AAkBD,CAxCD;;AA0CAzB,QAAQgC,aAAR,GAAwB,UAAC9B,GAAD,EAAMC,GAAN,EAAc;AACpC,MAAMG,KAAKa,SAASjB,IAAIkB,MAAJ,CAAWC,SAApB,EAA+B,EAA/B,CAAX;AACA,MAAKnB,IAAIyB,IAAJ,CAASC,IAAV,CAAgBC,IAAhB,OAA2B,EAA3B,IAAiC,OAAO3B,IAAIyB,IAAJ,CAASC,IAAhB,KAAyB,QAA9D,EAAwE;AACtE,WAAOzB,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJO,aAAO;AADH,KADD,CAAP;AAID,GALD,MAKO,IAAKpB,IAAIyB,IAAJ,CAASG,IAAV,CAAgBD,IAAhB,OAA2B,EAA3B,IAAiC,OAAO3B,IAAIyB,IAAJ,CAASG,IAAhB,KAAyB,QAA9D,EAAwE;AAC7E,WAAO3B,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJO,aAAO;AADH,KADD,CAAP;AAID,GALM,MAKA,IAAIpB,IAAIyB,IAAJ,CAASI,OAAT,KAAqB,EAArB,IAA2B7B,IAAIyB,IAAJ,CAASI,OAAT,CAAiBP,MAAjB,IAA2B,GAAtD,IAA6DtB,IAAIyB,IAAJ,CAASI,OAAT,CAAiBP,MAAjB,IAA2B,EAA5F,EAAgG;AACrG,WAAOrB,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJO,aAAO;AADH,KADD,CAAP;AAID;AACDZ,sBAAGC,KAAH,CAAS,yCAAT,EAAoD,CAACL,EAAD,CAApD,EAA0D,UAACM,GAAD,EAAMqB,QAAN,EAAmB;AAC3E,QAAIrB,GAAJ,EAAS;AACP,aAAOT,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJH;AADI,OADD,CAAP;AAID;AACD,QAAIqB,SAAShB,IAAT,CAAcO,MAAd,KAAyB,CAAzB,KAA+BS,SAAShB,IAAT,CAAc,CAAd,EAAiBH,MAAjB,KAA4B,UAA5B,IAA0CmB,SAAShB,IAAT,CAAc,CAAd,EAAiBH,MAAjB,KAA4B,UAArG,CAAJ,EAAsH;AACpH,aAAOX,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJO,eAAO;AADH,OADD,CAAP;AAID;AACD,QAAMX,QAAQ;AACZH,YAAM,gGADM;AAEZC,cAAQ,CAACP,IAAIyB,IAAJ,CAASC,IAAV,EAAgB1B,IAAIyB,IAAJ,CAASI,OAAzB,EAAkC7B,IAAIyB,IAAJ,CAASG,IAA3C,EAAiDxB,EAAjD;AAFI,KAAd;AAIAI,wBAAGC,KAAH,CAASA,KAAT,EAAgB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC/B,UAAID,GAAJ,EAAS;AACP,eAAOT,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJH;AADI,SADD,CAAP;AAID;AACD,UAAIC,OAAOqB,QAAP,KAAoB,CAApB,IAAyBrB,OAAOI,IAAP,CAAYO,MAAZ,GAAqB,CAAlD,EAAqD;AACnD,eAAOrB,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJF,kBAAQA,OAAOI;AADX,SADD,CAAP;AAID;AACDd,UAAIW,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ;AACJU,iBAAS;AADL,OADR;AAID,KAjBD;AAkBD,GAnCD;AAoCD,CAtDD;;AAwDAzB,QAAQmC,aAAR,GAAwB,UAACjC,GAAD,EAAMC,GAAN,EAAc;AACpC,MAAMG,KAAKa,SAASjB,IAAIkB,MAAJ,CAAWC,SAApB,EAA+B,EAA/B,CAAX;AACAX,sBAAGC,KAAH,CAAS,yCAAT,EAAoD,CAACL,EAAD,CAApD,EAA0D,UAACM,GAAD,EAAMqB,QAAN,EAAmB;AAC3E,QAAIrB,GAAJ,EAAS;AACP,aAAOT,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJH;AADI,OADD,CAAP;AAID;AACD,QAAIqB,SAAShB,IAAT,CAAcO,MAAd,KAAyB,CAAzB,KAA+BS,SAAShB,IAAT,CAAc,CAAd,EAAiBH,MAAjB,KAA4B,UAA5B,IAA0CmB,SAAShB,IAAT,CAAc,CAAd,EAAiBH,MAAjB,KAA4B,UAArG,CAAJ,EAAsH;AACpH,aAAOX,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJO,eAAO;AADH,OADD,CAAP;AAID;AACDZ,wBAAGC,KAAH,CAAS,kCAAT,EAA6C,CAACL,EAAD,CAA7C,EAAmD,UAACM,GAAD,EAAMC,MAAN,EAAiB;AAClE,UAAID,GAAJ,EAAS;AACP,eAAOT,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJH;AADI,SADD,CAAP;AAID;AACD,UAAIC,OAAOqB,QAAP,KAAoB,CAAxB,EAA2B;AACzB,eAAO/B,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJU,mBAAS;AADL,SADD,CAAP;AAID;AACDtB,UAAIW,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ;AACJU,iBAAS;AADL,OADR;AAID,KAjBD;AAkBD,GA/BD;AAgCD,CAlCD;;AAqCA;AACAzB,QAAQoC,cAAR,GAAyB,UAAClC,GAAD,EAAMC,GAAN,EAAc;AACrC,MAAMI,MAAM;AACVC,UAAM;AADI,GAAZ;AAGAE,sBAAGC,KAAH,CAASJ,GAAT,EAAc,UAACK,GAAD,EAAMC,MAAN,EAAiB;AAC7B,QAAID,GAAJ,EAAS;AACP,aAAOT,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJH;AADI,OADD,EAIJW,GAJI,EAAP;AAKD;AACDpB,QAAIW,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ;AACJC,YAAMd,IAAIG,QADN;AAEJQ,cAAQA,OAAOI;AAFX,KADR;AAKD,GAbD;AAcD,CAlBD;;AAoBAjB,QAAQqC,cAAR,GAAyB,UAACnC,GAAD,EAAMC,GAAN,EAAc;AACrC,MAAMG,KAAKa,SAASjB,IAAIkB,MAAJ,CAAWC,SAApB,EAA+B,EAA/B,CAAX;AACA,MAAMV,QAAQ;AACZH,UAAM,2CADM;AAEZC,YAAQ,CAAC,UAAD,EAAaH,EAAb;AAFI,GAAd;AAIAI,sBAAGC,KAAH,CAASA,KAAT,EAAgB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC/B,QAAID,GAAJ,EAAS;AACP,aAAOT,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJH;AADI,OADD,CAAP;AAID;AACD,QAAIC,OAAOqB,QAAP,KAAoB,CAAxB,EAA2B;AACzB,UAAM3B,MAAM;AACVC,cAAM,oDADI;AAEVC,gBAAQ,CAACH,EAAD;AAFE,OAAZ;AAIAI,0BAAGC,KAAH,CAASJ,GAAT,EAAc,UAACK,GAAD,EAAMC,MAAN,EAAiB;AAC7B,YAAID,GAAJ,EAAS;AACP,iBAAOT,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJO,mBAAOV;AADH,WADD,EAIJW,GAJI,EAAP;AAKD;AACD,YAAIV,OAAOI,IAAP,CAAYO,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,iBAAOrB,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJF,oBAAQA,OAAOI;AADX,WADD,CAAP;AAID;AACF,OAdD;AAeD;AACF,GA5BD;AA6BD,CAnCD;;AAqCAjB,QAAQsC,iBAAR,GAA4B,UAACpC,GAAD,EAAMC,GAAN,EAAc;AACxC,MAAMG,KAAKa,SAASjB,IAAIkB,MAAJ,CAAWC,SAApB,EAA+B,EAA/B,CAAX;AACA,MAAMV,QAAQ;AACZH,UAAM,2CADM;AAEZC,YAAQ,CAAC,aAAD,EAAgBH,EAAhB;AAFI,GAAd;AAIAI,sBAAGC,KAAH,CAASA,KAAT,EAAgB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC/B,QAAID,GAAJ,EAAS;AACP,aAAOT,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJH;AADI,OADD,CAAP;AAID;AACD,QAAIC,OAAOqB,QAAP,KAAoB,CAAxB,EAA2B;AACzB,UAAM3B,MAAM;AACVC,cAAM,oDADI;AAEVC,gBAAQ,CAACH,EAAD;AAFE,OAAZ;AAIAI,0BAAGC,KAAH,CAASJ,GAAT,EAAc,UAACK,GAAD,EAAMC,MAAN,EAAiB;AAC7B,YAAID,GAAJ,EAAS;AACP,iBAAOT,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJO,mBAAOV;AADH,WADD,EAIJW,GAJI,EAAP;AAKD;AACD,YAAIV,OAAOI,IAAP,CAAYO,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,iBAAOrB,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJF,oBAAQA,OAAOI;AADX,WADD,CAAP;AAID;AACF,OAdD;AAeD;AACF,GA5BD;AA6BD,CAnCD;;AAqCAjB,QAAQuC,cAAR,GAAyB,UAACrC,GAAD,EAAMC,GAAN,EAAc;AACrC,MAAMG,KAAKa,SAASjB,IAAIkB,MAAJ,CAAWC,SAApB,EAA+B,EAA/B,CAAX;AACA,MAAMV,QAAQ;AACZH,UAAM,2CADM;AAEZC,YAAQ,CAAC,UAAD,EAAaH,EAAb;AAFI,GAAd;AAIAI,sBAAGC,KAAH,CAASA,KAAT,EAAgB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC/B,QAAID,GAAJ,EAAS;AACP,aAAOT,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJH;AADI,OADD,CAAP;AAID;AACD,QAAIC,OAAOqB,QAAP,KAAoB,CAAxB,EAA2B;AACzB,UAAM3B,MAAM;AACVC,cAAM,oDADI;AAEVC,gBAAQ,CAACH,EAAD;AAFE,OAAZ;AAIAI,0BAAGC,KAAH,CAASJ,GAAT,EAAc,UAACK,GAAD,EAAMC,MAAN,EAAiB;AAC7B,YAAID,GAAJ,EAAS;AACP,iBAAOT,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJO,mBAAOV;AADH,WADD,EAIJW,GAJI,EAAP;AAKD;AACD,YAAIV,OAAOI,IAAP,CAAYO,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,iBAAOrB,IAAIW,MAAJ,CAAW,GAAX,EACJC,IADI,CACC;AACJF,oBAAQA,OAAOI;AADX,WADD,CAAP;AAID;AACF,OAdD;AAeD;AACF,GA5BD;AA6BD,CAnCD","file":"requestsController.js","sourcesContent":["import db from '../models/userModel';\r\n\r\nconst validateEmail = (email) => {\r\n  const re = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n  return re.test(email);\r\n};\r\n\r\n\r\nexports.getAllUserRequests = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const sql = {\r\n    text: 'SELECT * FROM requests WHERE user_id=$1 ORDER BY id ASC',\r\n    values: [userId],\r\n  };\r\n  db.query(sql, (err, result) => {\r\n    res.status(200)\r\n      .json({\r\n        user: req.userInfo,\r\n        result: result.rows,\r\n      });\r\n  });\r\n};\r\n\r\nexports.getSingleRequest = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const sql = {\r\n    text: 'SELECT * FROM requests WHERE id=$1 AND user_id=$2 ORDER BY id ASC',\r\n    values: [id, userId],\r\n  };\r\n  db.query(sql, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          error: err,\r\n        })\r\n        .end();\r\n    }\r\n    if (result.rows.length > 0) {\r\n      return res.status(200)\r\n        .json({\r\n          result: result.rows,\r\n        });\r\n    }\r\n    res.status(404)\r\n      .json({\r\n        message: 'Request not found',\r\n      });\r\n  });\r\n};\r\n\r\nexports.createRequest = (req, res) => {\r\n  if ((req.body.name).trim() === '' || typeof req.body.name !== 'string') {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'Name is required and must be a string value',\r\n      });\r\n  } else if ((req.body.dept).trim() === '' || typeof req.body.dept !== 'string') {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'Department is required and must be a string value',\r\n      });\r\n  } else if ((req.body.request).trim() === '' || req.body.request.length >= 200 || req.body.request.length <= 10) {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'Request cannot be empty or more than 200 characters',\r\n      });\r\n  }\r\n  const userId = req.userInfo.id;\r\n  const query = {\r\n    text: 'INSERT INTO requests(user_id, requester_name, requester_email, date, status, request, dept) VALUES($1, $2, $3, NOW() ,$4, $5, $6)',\r\n    values: [userId, req.body.name, req.userInfo.email, 'pending', req.body.request, req.body.dept],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    res.status(201)\r\n      .json({\r\n        message: 'Request Created successfully',\r\n      });\r\n    if (req.body.name && req.body.email === null) {\r\n      res.status(400)\r\n        .json({\r\n          message: 'Bad Request',\r\n        });\r\n    }\r\n  });\r\n};\r\n\r\nexports.modifyRequest = (req, res) => {\r\n  const id = parseInt(req.params.requestId, 10);\r\n  if ((req.body.name).trim() === '' || typeof req.body.name !== 'string') {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'Name is required and must be a string value',\r\n      });\r\n  } else if ((req.body.dept).trim() === '' || typeof req.body.dept !== 'string') {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'Department is required and must be a string value',\r\n      });\r\n  } else if (req.body.request === '' || req.body.request.length >= 200 || req.body.request.length <= 10) {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'Request cannot be empty or more than 200 characters',\r\n      });\r\n  }\r\n  db.query('SELECT status FROM requests WHERE id=$1', [id], (err, response) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (response.rows.length !== 0 && (response.rows[0].status === 'approved' || response.rows[0].status === 'resolved')) {\r\n      return res.status(409)\r\n        .json({\r\n          error: 'Cannot edit!, Request has already been approved',\r\n        });\r\n    }\r\n    const query = {\r\n      text: 'UPDATE requests SET requester_name=$1, date=NOW(), request=$2, dept=$3 WHERE id=$4 RETURNING *',\r\n      values: [req.body.name, req.body.request, req.body.dept, id],\r\n    };\r\n    db.query(query, (err, result) => {\r\n      if (err) {\r\n        return res.status(500)\r\n          .json({\r\n            err,\r\n          });\r\n      }\r\n      if (result.rowCount === 1 && result.rows.length > 0) {\r\n        return res.status(200)\r\n          .json({\r\n            result: result.rows,\r\n          });\r\n      }\r\n      res.status(404)\r\n        .json({\r\n          message: 'Request Not found',\r\n        });\r\n    });\r\n  });\r\n};\r\n\r\nexports.deleteRequest = (req, res) => {\r\n  const id = parseInt(req.params.requestId, 10);\r\n  db.query('SELECT status FROM requests WHERE id=$1', [id], (err, response) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (response.rows.length !== 0 && (response.rows[0].status === 'approved' || response.rows[0].status === 'resolved')) {\r\n      return res.status(409)\r\n        .json({\r\n          error: 'Cannot Delete!, Request has already been approved',\r\n        });\r\n    }\r\n    db.query('DELETE FROM requests WHERE id=$1', [id], (err, result) => {\r\n      if (err) {\r\n        return res.status(500)\r\n          .json({\r\n            err,\r\n          });\r\n      }\r\n      if (result.rowCount === 0) {\r\n        return res.status(404)\r\n          .json({\r\n            message: 'Request Not found',\r\n          });\r\n      }\r\n      res.status(200)\r\n        .json({\r\n          message: 'Request deleted successfully',\r\n        });\r\n    });\r\n  });\r\n};\r\n\r\n\r\n// Admin Controllers\r\nexports.getAllRequests = (req, res) => {\r\n  const sql = {\r\n    text: 'SELECT * FROM requests ORDER BY id ASC',\r\n  };\r\n  db.query(sql, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        })\r\n        .end();\r\n    }\r\n    res.status(200)\r\n      .json({\r\n        user: req.userInfo,\r\n        result: result.rows,\r\n      });\r\n  });\r\n};\r\n\r\nexports.approveRequest = (req, res) => {\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET status=$1 WHERE id=$2',\r\n    values: ['approved', id],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rowCount === 1) {\r\n      const sql = {\r\n        text: 'SELECT * FROM requests WHERE id=$1 ORDER BY id ASC',\r\n        values: [id],\r\n      };\r\n      db.query(sql, (err, result) => {\r\n        if (err) {\r\n          return res.status(500)\r\n            .json({\r\n              error: err,\r\n            })\r\n            .end();\r\n        }\r\n        if (result.rows.length > 0) {\r\n          return res.status(200)\r\n            .json({\r\n              result: result.rows,\r\n            });\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nexports.disapproveRequest = (req, res) => {\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET status=$1 WHERE id=$2',\r\n    values: ['disapproved', id],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rowCount === 1) {\r\n      const sql = {\r\n        text: 'SELECT * FROM requests WHERE id=$1 ORDER BY id ASC',\r\n        values: [id],\r\n      };\r\n      db.query(sql, (err, result) => {\r\n        if (err) {\r\n          return res.status(500)\r\n            .json({\r\n              error: err,\r\n            })\r\n            .end();\r\n        }\r\n        if (result.rows.length > 0) {\r\n          return res.status(200)\r\n            .json({\r\n              result: result.rows,\r\n            });\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nexports.resolveRequest = (req, res) => {\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET status=$1 WHERE id=$2',\r\n    values: ['resolved', id],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rowCount === 1) {\r\n      const sql = {\r\n        text: 'SELECT * FROM requests WHERE id=$1 ORDER BY id ASC',\r\n        values: [id],\r\n      };\r\n      db.query(sql, (err, result) => {\r\n        if (err) {\r\n          return res.status(500)\r\n            .json({\r\n              error: err,\r\n            })\r\n            .end();\r\n        }\r\n        if (result.rows.length > 0) {\r\n          return res.status(200)\r\n            .json({\r\n              result: result.rows,\r\n            });\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n"]}