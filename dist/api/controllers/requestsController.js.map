{"version":3,"sources":["../../../api/controllers/requestsController.js"],"names":["exports","getAllUserRequests","req","res","userId","userInfo","id","sql","text","values","db","query","err","result","status","set","json","user","rows","getSingleRequest","parseInt","params","requestId","length","message","createRequest","body","name","email","request","dept","modifyRequest","rowCount","error","end","deleteRequest","getAllRequests","approveRequest","disapproveRequest","resolveRequest"],"mappings":"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","file":"requestsController.js","sourcesContent":["import db from '../models/userModel';\r\n\r\nexports.getAllUserRequests = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const sql = {\r\n    text: 'SELECT * FROM requests WHERE user_id=$1 ORDER BY id ASC',\r\n    values: [userId],\r\n  };\r\n  db.query(sql, (err, result) => {\r\n    res.status(200)\r\n      .set('Access-Control-Allow-Origin', '*')\r\n      .json({\r\n        user: req.userInfo,\r\n        result: result.rows,\r\n      });\r\n  });\r\n};\r\n\r\nexports.getSingleRequest = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const sql = {\r\n    text: 'SELECT * FROM requests WHERE id=$1 AND user_id=$2 ORDER BY id ASC',\r\n    values: [id, userId],\r\n  };\r\n  db.query(sql, (err, result) => {\r\n    // if (err) {\r\n    //   return res.status(500)\r\n    //     .json({\r\n    //       error: err,\r\n    //     })\r\n    //     .end();\r\n    // }\r\n    if (result.rows.length > 0) {\r\n      return res.status(200)\r\n        .json({\r\n          result: result.rows,\r\n        });\r\n    }\r\n    res.status(404)\r\n      .json({\r\n        message: 'Request not found',\r\n      });\r\n  });\r\n};\r\n\r\nexports.createRequest = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const query = {\r\n    text: 'INSERT INTO requests(user_id, requester_name, requester_email, date, status, request, dept) VALUES($1, $2, $3, NOW() ,$4, $5, $6)',\r\n    values: [userId, req.body.name, req.body.email, 'pending', req.body.request, req.body.dept],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    // if (err) {\r\n    //   return res.status(500)\r\n    //     .json({\r\n    //       err,\r\n    //     });\r\n    // }\r\n    res.status(201)\r\n      .json({\r\n        message: 'Request Created successfully',\r\n      });\r\n    if (req.body.name && req.body.email === null) {\r\n      res.status(400)\r\n        .json({\r\n          message: 'Bad Request',\r\n        });\r\n    }\r\n  });\r\n};\r\n\r\nexports.modifyRequest = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET requester_name=$1, requester_email=$2, date=NOW(), request=$3, dept=$4 WHERE id=$5',\r\n    values: [req.body.name, req.body.email, req.body.request, req.body.dept, id],\r\n  };\r\n\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rowCount === 1) {\r\n      const sql = {\r\n        text: 'SELECT * FROM requests WHERE id=$1 AND user_id=$2',\r\n        values: [id, userId],\r\n      };\r\n      db.query(sql, (err, result) => {\r\n        if (err) {\r\n          return res.status(500)\r\n            .json({\r\n              error: err,\r\n            })\r\n            .end();\r\n        }\r\n        if (result.rows.length > 0) {\r\n          return res.status(200)\r\n            .json({\r\n              result: result.rows,\r\n            });\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nexports.deleteRequest = (req, res) => {\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'DELETE FROM requests WHERE id=$1',\r\n    values: [id],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    // if (err) {\r\n    //   return res.status(500)\r\n    //     .json({\r\n    //       err,\r\n    //     });\r\n    // }\r\n    if (result.rowCount === 0) {\r\n      return res.status(404)\r\n        .json({\r\n          message: 'Request Not found',\r\n        });\r\n    }\r\n    res.status(200)\r\n      .json({\r\n        message: 'Request deleted successfully',\r\n      });\r\n  });\r\n};\r\n\r\n\r\n// Admin Controllers\r\nexports.getAllRequests = (req, res) => {\r\n  // const userId = req.userInfo.id;\r\n  const sql = {\r\n    text: 'SELECT * FROM requests ORDER BY id ASC',\r\n  };\r\n  db.query(sql, (err, result) => {\r\n    // if (err) {\r\n    //   return res.status(500)\r\n    //     .json({\r\n    //       err,\r\n    //     })\r\n    //     .end();\r\n    // }\r\n    // res.set('Access-Control-Allow-Origin', '*');\r\n    res.status(200)\r\n      .set('Access-Control-Allow-Origin', '*')\r\n      .json({\r\n        user: req.userInfo,\r\n        result: result.rows,\r\n      });\r\n  });\r\n};\r\n\r\nexports.approveRequest = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET status=$1 WHERE id=$2',\r\n    values: ['approved', id],\r\n  };\r\n\r\n  db.query(query, (err, result) => {\r\n    // if (err) {\r\n    //   return res.status(500)\r\n    //     .json({\r\n    //       err,\r\n    //     });\r\n    // }\r\n    if (result.rowCount === 1) {\r\n      const sql = {\r\n        text: 'SELECT * FROM requests WHERE id=$1 ORDER BY id ASC',\r\n        values: [id],\r\n      };\r\n      db.query(sql, (err, result) => {\r\n        if (err) {\r\n          return res.status(500)\r\n            .json({\r\n              error: err,\r\n            })\r\n            .end();\r\n        }\r\n        if (result.rows.length > 0) {\r\n          return res.status(200)\r\n            .json({\r\n              result: result.rows,\r\n            });\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nexports.disapproveRequest = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET status=$1 WHERE id=$2',\r\n    values: ['disapproved', id],\r\n  };\r\n\r\n  db.query(query, (err, result) => {\r\n    // if (err) {\r\n    //   return res.status(500)\r\n    //     .json({\r\n    //       err,\r\n    //     });\r\n    // }\r\n    if (result.rowCount === 1) {\r\n      const sql = {\r\n        text: 'SELECT * FROM requests WHERE id=$1 ORDER BY id ASC',\r\n        values: [id],\r\n      };\r\n      db.query(sql, (err, result) => {\r\n        if (err) {\r\n          return res.status(500)\r\n            .json({\r\n              error: err,\r\n            })\r\n            .end();\r\n        }\r\n        if (result.rows.length > 0) {\r\n          return res.status(200)\r\n            .json({\r\n              result: result.rows,\r\n            });\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nexports.resolveRequest = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET status=$1 WHERE id=$2',\r\n    values: ['resolved', id],\r\n  };\r\n\r\n  db.query(query, (err, result) => {\r\n    // if (err) {\r\n    //   return res.status(500)\r\n    //     .json({\r\n    //       err,\r\n    //     });\r\n    // }\r\n    if (result.rowCount === 1) {\r\n      const sql = {\r\n        text: 'SELECT * FROM requests WHERE id=$1 ORDER BY id ASC',\r\n        values: [id],\r\n      };\r\n      db.query(sql, (err, result) => {\r\n        if (err) {\r\n          return res.status(500)\r\n            .json({\r\n              error: err,\r\n            })\r\n            .end();\r\n        }\r\n        if (result.rows.length > 0) {\r\n          return res.status(200)\r\n            .json({\r\n              result: result.rows,\r\n            });\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n"]}