{"version":3,"sources":["../../../api/controllers/requestsController.js"],"names":["validateEmail","email","re","test","exports","getAllUserRequests","req","res","userId","userInfo","id","sql","text","values","db","query","err","result","status","set","json","user","rows","getSingleRequest","parseInt","params","requestId","error","end","length","message","createRequest","body","name","trim","dept","request","modifyRequest","rowCount","deleteRequest","getAllRequests","approveRequest","disapproveRequest","resolveRequest"],"mappings":"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","file":"requestsController.js","sourcesContent":["import db from '../models/userModel';\r\n\r\nconst validateEmail = (email) => {\r\n  const re = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n  return re.test(email);\r\n};\r\n\r\n\r\nexports.getAllUserRequests = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const sql = {\r\n    text: 'SELECT * FROM requests WHERE user_id=$1 ORDER BY id ASC',\r\n    values: [userId],\r\n  };\r\n  db.query(sql, (err, result) => {\r\n    res.status(200)\r\n      .set('Access-Control-Allow-Origin', '*')\r\n      .json({\r\n        user: req.userInfo,\r\n        result: result.rows,\r\n      });\r\n  });\r\n};\r\n\r\nexports.getSingleRequest = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const sql = {\r\n    text: 'SELECT * FROM requests WHERE id=$1 AND user_id=$2 ORDER BY id ASC',\r\n    values: [id, userId],\r\n  };\r\n  db.query(sql, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          error: err,\r\n        })\r\n        .end();\r\n    }\r\n    if (result.rows.length > 0) {\r\n      return res.status(200)\r\n        .json({\r\n          result: result.rows,\r\n        });\r\n    }\r\n    res.status(404)\r\n      .json({\r\n        message: 'Request not found',\r\n      });\r\n  });\r\n};\r\n\r\nexports.createRequest = (req, res) => {\r\n  if ((req.body.name).trim() === '' || typeof req.body.name !== 'string') {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'Name is required and must be a string value',\r\n      });\r\n  } else if ((req.body.dept).trim() === '' || typeof req.body.dept !== 'string') {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'Department is required and must be a string value',\r\n      });\r\n  } else if ((req.body.email).trim() === '' || !validateEmail(req.body.email)) {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'A valid email is required',\r\n      });\r\n  } else if ((req.body.request).trim() === '' || req.body.request.length >= 200 || req.body.request.length <= 10) {\r\n    return res.status(400)\r\n      .json({\r\n        error: 'Request cannot be more than 200 characters',\r\n      });\r\n  }\r\n  const userId = req.userInfo.id;\r\n  const query = {\r\n    text: 'INSERT INTO requests(user_id, requester_name, requester_email, date, status, request, dept) VALUES($1, $2, $3, NOW() ,$4, $5, $6)',\r\n    values: [userId, req.body.name, req.body.email, 'pending', req.body.request, req.body.dept],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    res.status(201)\r\n      .json({\r\n        message: 'Request Created successfully',\r\n      });\r\n    if (req.body.name && req.body.email === null) {\r\n      res.status(400)\r\n        .json({\r\n          message: 'Bad Request',\r\n        });\r\n    }\r\n  });\r\n};\r\n\r\nexports.modifyRequest = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET requester_name=$1, requester_email=$2, date=NOW(), request=$3, dept=$4 WHERE id=$5',\r\n    values: [req.body.name, req.body.email, req.body.request, req.body.dept, id],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rowCount === 1) {\r\n      const sql = {\r\n        text: 'SELECT * FROM requests WHERE id=$1 AND user_id=$2',\r\n        values: [id, userId],\r\n      };\r\n      db.query(sql, (err, result) => {\r\n        if (err) {\r\n          return res.status(500)\r\n            .json({\r\n              error: err,\r\n            })\r\n            .end();\r\n        }\r\n        if (result.rows.length > 0) {\r\n          return res.status(200)\r\n            .json({\r\n              result: result.rows,\r\n            });\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nexports.deleteRequest = (req, res) => {\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'DELETE FROM requests WHERE id=$1',\r\n    values: [id],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rowCount === 0) {\r\n      return res.status(404)\r\n        .json({\r\n          message: 'Request Not found',\r\n        });\r\n    }\r\n    res.status(200)\r\n      .json({\r\n        message: 'Request deleted successfully',\r\n      });\r\n  });\r\n};\r\n\r\n\r\n// Admin Controllers\r\nexports.getAllRequests = (req, res) => {\r\n  const sql = {\r\n    text: 'SELECT * FROM requests ORDER BY id ASC',\r\n  };\r\n  db.query(sql, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        })\r\n        .end();\r\n    }\r\n    res.status(200)\r\n      .set('Access-Control-Allow-Origin', '*')\r\n      .json({\r\n        user: req.userInfo,\r\n        result: result.rows,\r\n      });\r\n  });\r\n};\r\n\r\nexports.approveRequest = (req, res) => {\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET status=$1 WHERE id=$2',\r\n    values: ['approved', id],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rowCount === 1) {\r\n      const sql = {\r\n        text: 'SELECT * FROM requests WHERE id=$1 ORDER BY id ASC',\r\n        values: [id],\r\n      };\r\n      db.query(sql, (err, result) => {\r\n        if (err) {\r\n          return res.status(500)\r\n            .json({\r\n              error: err,\r\n            })\r\n            .end();\r\n        }\r\n        if (result.rows.length > 0) {\r\n          return res.status(200)\r\n            .json({\r\n              result: result.rows,\r\n            });\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nexports.disapproveRequest = (req, res) => {\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET status=$1 WHERE id=$2',\r\n    values: ['disapproved', id],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rowCount === 1) {\r\n      const sql = {\r\n        text: 'SELECT * FROM requests WHERE id=$1 ORDER BY id ASC',\r\n        values: [id],\r\n      };\r\n      db.query(sql, (err, result) => {\r\n        if (err) {\r\n          return res.status(500)\r\n            .json({\r\n              error: err,\r\n            })\r\n            .end();\r\n        }\r\n        if (result.rows.length > 0) {\r\n          return res.status(200)\r\n            .json({\r\n              result: result.rows,\r\n            });\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nexports.resolveRequest = (req, res) => {\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET status=$1 WHERE id=$2',\r\n    values: ['resolved', id],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rowCount === 1) {\r\n      const sql = {\r\n        text: 'SELECT * FROM requests WHERE id=$1 ORDER BY id ASC',\r\n        values: [id],\r\n      };\r\n      db.query(sql, (err, result) => {\r\n        if (err) {\r\n          return res.status(500)\r\n            .json({\r\n              error: err,\r\n            })\r\n            .end();\r\n        }\r\n        if (result.rows.length > 0) {\r\n          return res.status(200)\r\n            .json({\r\n              result: result.rows,\r\n            });\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n"]}