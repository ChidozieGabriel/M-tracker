{"version":3,"sources":["../../../api/controllers/requestsController.js"],"names":["exports","getAllUserRequests","req","res","userId","userInfo","id","sql","text","values","db","query","err","result","status","json","end","user","rows","getSingleRequest","parseInt","params","requestId","error","length","message","createRequest","body","name","email","request","dept","modifyRequest","rowCount","deleteRequest"],"mappings":"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","file":"requestsController.js","sourcesContent":["import db from '../models/userModel';\r\n\r\n// global.data = [\r\n//   {\r\n//     id: 110,\r\n//     name: 'John doe',\r\n//     email: 'example@gmail.com',\r\n//     date: '2018-10-13',\r\n//     dept: 'Accounts',\r\n//     message: 'Lorem ipsum ',\r\n//     Url: 'http://localhost:5000/api/v1/users/requests/110',\r\n//   },\r\n//\r\n//   {\r\n//     id: 120,\r\n//     name: 'Jane doe',\r\n//     email: 'janedoe@gmail.com',\r\n//     date: '2014-1-25',\r\n//     dept: 'Engineering',\r\n//     message: 'Lorem ipsum Lorem ipsum Lorem',\r\n//     Url: 'http://localhost:5000/api/v1/users/requests/120',\r\n//   },\r\n//   {\r\n//     id: 130,\r\n//     name: 'Frank Moore',\r\n//     email: 'frankmoore@examplemail.me',\r\n//     date: '2011-8-1',\r\n//     dept: 'Logistics',\r\n//     message: 'Lorem ipsum Lorem ipsum Lorem ipsum ',\r\n//     Url: 'http://localhost:5000/api/v1/users/requests/130',\r\n//   },\r\n// ];\r\n\r\n\r\nexports.getAllUserRequests = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const sql = {\r\n    text: 'SELECT * FROM requests WHERE user_id=$1',\r\n    values: [userId],\r\n  };\r\n  db.query(sql, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        })\r\n        .end();\r\n    }\r\n    res.status(200)\r\n      .json({\r\n        user: req.userInfo,\r\n        result: result.rows,\r\n      });\r\n  });\r\n};\r\n\r\n\r\nexports.getSingleRequest = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const sql = {\r\n    text: 'SELECT * FROM requests WHERE id=$1 AND user_id=$2',\r\n    values: [id, userId],\r\n  };\r\n  db.query(sql, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          error: err,\r\n        })\r\n        .end();\r\n    }\r\n    if (result.rows.length > 0) {\r\n      return res.status(200)\r\n        .json({\r\n          result: result.rows,\r\n        });\r\n    }\r\n    res.status(404)\r\n      .json({\r\n        message: 'Request not found',\r\n      });\r\n  });\r\n};\r\n\r\nexports.createRequest = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const query = {\r\n    text: 'INSERT INTO requests(user_id, requester_name, requester_email, date, status, request, dept) VALUES($1, $2, $3, NOW() ,$4, $5, $6)',\r\n    values: [userId, req.body.name, req.body.email, 'pending', req.body.request, req.body.dept],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    res.status(201)\r\n      .json({\r\n        message: 'Request Created successfully',\r\n      });\r\n    if (req.body.name && req.body.email === null) {\r\n      res.status(400)\r\n        .json({\r\n          message: 'Bad Request',\r\n        });\r\n    }\r\n  });\r\n};\r\n\r\nexports.modifyRequest = (req, res) => {\r\n  const userId = req.userInfo.id;\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'UPDATE requests SET requester_name=$1, requester_email=$2, date=NOW(), request=$3, dept=$4 WHERE id=$5',\r\n    values: [req.body.name, req.body.email, req.body.request, req.body.dept, id],\r\n  };\r\n\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rowCount === 1) {\r\n      const sql = {\r\n        text: 'SELECT * FROM requests WHERE id=$1 AND user_id=$2',\r\n        values: [id, userId],\r\n      };\r\n      db.query(sql, (err, result) => {\r\n        if (err) {\r\n          return res.status(500)\r\n            .json({\r\n              error: err,\r\n            })\r\n            .end();\r\n        }\r\n        if (result.rows.length > 0) {\r\n          return res.status(200)\r\n            .json({\r\n              result: result.rows,\r\n            });\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n\r\n\r\nexports.deleteRequest = (req, res) => {\r\n  const id = parseInt(req.params.requestId, 10);\r\n  const query = {\r\n    text: 'DELETE FROM requests WHERE id=$1',\r\n    values: [id],\r\n  };\r\n  db.query(query, (err, result) => {\r\n    if (err) {\r\n      return res.status(500)\r\n        .json({\r\n          err,\r\n        });\r\n    }\r\n    if (result.rowCount === 0) {\r\n      return res.status(404)\r\n        .json({\r\n          message: 'Request Not found',\r\n        });\r\n    }\r\n    res.status(200)\r\n      .json({\r\n        message: 'Request deleted successfully',\r\n      });\r\n  });\r\n};\r\n"]}