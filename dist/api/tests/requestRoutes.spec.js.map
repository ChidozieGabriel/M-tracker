{"version":3,"sources":["../../../api/tests/requestRoutes.spec.js"],"names":["Expect","chai","expect","use","chaiHttp","global","token","before","done","request","app","post","send","email","password","end","err","res","body","describe","it","get","to","be","equal","statusCode","set","Authorization","an","data1","name","dept","data","put","delete"],"mappings":"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","file":"requestRoutes.spec.js","sourcesContent":["import chai from 'chai';\r\n\r\nimport chaiHttp from 'chai-http';\r\n\r\nimport app from '../../server';\r\n\r\nconst Expect = chai.expect;\r\n\r\nchai.use(chaiHttp);\r\n\r\nglobal.token = null;\r\nbefore((done) => {\r\n  chai.request(app)\r\n    .post('/api/v1/auth/login')\r\n    .send({\r\n      email: 'example@gmail.com',\r\n      password: '123456',\r\n    })\r\n    .end((err, res) => {\r\n      global.token = res.body.token;\r\n      done();\r\n    });\r\n});\r\n\r\ndescribe('SERVER', () => {\r\n  it('Should return 200 on root Endpoint  ', (done) => {\r\n    chai.request(app)\r\n      .get('/')\r\n      .end((err, res) => {\r\n        Expect(err).to.be.equal(null);\r\n        Expect(res.statusCode).to.equal(200);\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('Should return 404 when an invalid route is entered', (done) => {\r\n    chai.request(app)\r\n      .get('/open')\r\n      .end((err, res) => {\r\n        Expect(err).to.be.equal(null);\r\n        Expect(res.statusCode).to.equal(404);\r\n        done();\r\n      });\r\n  });\r\n});\r\n\r\ndescribe('USER REQUEST CONTROLLER API ENDPOINT', () => {\r\n  it('Should list ALL requests on /user/request GET', (done) => {\r\n    chai.request(app)\r\n      .get('/api/v1/users/requests/')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .end((err, res) => {\r\n        Expect(err)\r\n          .to\r\n          .be\r\n          .equal(null);\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(200);\r\n        Expect(res)\r\n          .to\r\n          .be\r\n          .an('object');\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('Should list ONE requests on /user/request/:requestId GET', (done) => {\r\n    chai.request(app)\r\n      .get('/api/v1/users/requests/1')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(200);\r\n        Expect(res)\r\n          .to\r\n          .be\r\n          .an('object');\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('Should throw a 404 error when request is not found', (done) => {\r\n    chai.request(app)\r\n      .get('/api/v1/users/requests/1100')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(404);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should create a SINGLE request user/requests/ POST', (done) => {\r\n    const data1 = {\r\n      name: 'Janet May',\r\n      dept: 'Engineering HQ',\r\n      request: 'Lorem ipsum owjjfndfnmnxnfj Lorem ipsum Lorem',\r\n    };\r\n    chai.request(app)\r\n      .post('/api/v1/users/requests')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .send(data1)\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(201);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should update a SINGLE request on user/requests/:requestId PUT', (done) => {\r\n    const data = {\r\n      name: 'Janet May',\r\n      dept: 'Engineering HQ',\r\n      request: 'Lorem ipsum owjjfndfnmnxnfj Lorem ipsum Lorem',\r\n    };\r\n    chai.request(app)\r\n      .put('/api/v1/users/requests/3')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .send(data)\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(200);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should get an error when a bad request is sent on user/requests/  POST', (done) => {\r\n    const data1 = {\r\n      name: '',\r\n      dept: 'Engineering HQ',\r\n      request: 'Lorem ipsum owjjfndfnmnxnfj Lorem ipsum Lorem',\r\n    };\r\n    chai.request(app)\r\n      .post('/api/v1/users/requests/')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .send(data1)\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(400);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should get an error when a request is not found on user/requests/:requestId  PUT', (done) => {\r\n    const data = {\r\n      name: 'Janet May',\r\n      dept: 'Engineering HQ',\r\n      request: 'Lorem ipsum owjjfndfnmnxnfj Loremorem',\r\n    };\r\n    chai.request(app)\r\n      .put('/api/v1/users/requests/1100')\r\n      .send(data)\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(404);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should get an error when a request is not found on user/requests/:requestId  DELETE', (done) => {\r\n    chai.request(app)\r\n      .delete('/api/v1/users/requests/1110/delete')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(404);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should delete a request on user/requests/:requestId  DELETE', (done) => {\r\n    chai.request(app)\r\n      .delete('/api/v1/users/requests/2/delete')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(200);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should not grant access to none admin users', (done) => {\r\n    chai.request(app)\r\n      .get('/api/v1/requests/')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(403);\r\n      });\r\n    done();\r\n  });\r\n});\r\n"]}