{"version":3,"sources":["../../../api/tests/requestRoutes.spec.js"],"names":["server","superTest","agent","app","Expect","chai","expect","use","chaiHttp","token","beforeEach","done","post","send","email","password","end","err","res","body","describe","it","only","set","get","statusCode","to","equal","be","an","request","data1","id","name","date","dept","data","put"],"mappings":"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","file":"requestRoutes.spec.js","sourcesContent":["import chai from 'chai';\r\n\r\nimport { Pool } from 'pg';\r\n\r\nimport db from '../models/userModel';\r\n\r\nimport superTest from 'supertest';\r\n\r\nimport chaiHttp from 'chai-http';\r\n\r\nimport app from '../../app';\r\n\r\nconst server = superTest.agent(app);\r\n\r\nconst Expect = chai.expect;\r\n\r\nchai.use(chaiHttp);\r\n\r\nlet token = null;\r\n\r\nbeforeEach((done) => {\r\n  server\r\n    .post('/api/v1/auth/login')\r\n    .send({\r\n      email: 'nwokeochavictor@gmail.com',\r\n      password: '123456',\r\n    })\r\n    .end((err, res) => {\r\n      token = res.body.token;\r\n      done();\r\n    });\r\n});\r\n// const createDb = 'CREATE DATABASE \"testRunning\" WITH OWNER = \"testUser\" ENCODING = UTF8 CONNECTION LIMIT = -1';\r\n// pool.query(createDb, (err, results) => {\r\n//   if (err) {\r\n//     return err;\r\n//   }\r\n//   pool.query('CREATE TABLE users (id SERIAL PRIMARY KEY, email VARCHAR(40) NOT NULL, password VARCHAR(255) NOT NULL, admin boolean NOT NULL, name VARCHAR(255) NOT NULL)', (err, result) => {\r\n//     if (err) {\r\n//       return err;\r\n//     }\r\n//   });\r\n//   pool.end();\r\n// });\r\n// return done();\r\n// });\r\n\r\n\r\n// afterEach((done) => {\r\n//   pool.query('DROP DATABASE \"testRunning\"', (err, results) => {\r\n//     if (err) {\r\n//       return err;\r\n//     }\r\n//     pool.end();\r\n//   });\r\n//   return done();\r\n// });\r\n\r\n\r\ndescribe('USER REQUEST CONTROLLER API ENDPOINT', () => {\r\n  it.only('Should list ALL requests on /user/request GET', (done) => {\r\n    server\r\n      .set('Authorization', 'Bearer ' + token)\r\n      .get('/api/v1/users/requests')\r\n      .end((err, res) => {\r\n        // Expect(err).to.be.null;\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(200);\r\n        Expect(res)\r\n          .to\r\n          .be\r\n          .an('object');\r\n      });\r\n    return done();\r\n  });\r\n\r\n  it('Should list ONE requests on /user/request/:requestId GET', (done) => {\r\n    chai.request(app)\r\n      .get('/api/v1/users/requests/110')\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(200);\r\n        Expect(res)\r\n          .to\r\n          .be\r\n          .an('object');\r\n      });\r\n    return done();\r\n  });\r\n\r\n  it('Should throw a 404 error when request is not found', (done) => {\r\n    chai.request(app)\r\n      .get('/api/v1/users/requests/1100')\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(404);\r\n      });\r\n    return done();\r\n  });\r\n\r\n  const data1 = {\r\n    id: 140,\r\n    name: 'Janet May',\r\n    email: 'janetMaye@yahoomail.com',\r\n    date: '2011-11-21',\r\n    dept: 'Engineering HQ',\r\n    request: 'Lorem ipsum owjjfndfnmnxnfj Lorem ipsum Lorem',\r\n  };\r\n\r\n  it('should create a SINGLE request user/requests/ POST', (done) => {\r\n\r\n    chai.request(app)\r\n      .post('/api/v1/users/requests')\r\n      .send(data1)\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(201);\r\n      });\r\n    return done();\r\n  });\r\n\r\n  it('should get an error when a bad request is sent on user/requests/  POST', (done) => {\r\n    const data = {\r\n      id: '150',\r\n      name: 'Janet May',\r\n      email: 'janetMaye@yahoomail.com',\r\n      date: '2011-11-21',\r\n      dept: 'Engineering HQ',\r\n      request: 'Lorem ipsum',\r\n    };\r\n\r\n    chai.request(app)\r\n      .post('/api/v1/users/requests/')\r\n      .send(data)\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(400);\r\n      });\r\n    return done();\r\n  });\r\n\r\n\r\n  it('should update a SINGLE request on user/requests/:requestId PUT', (done) => {\r\n    const data = {\r\n      name: 'Janet May',\r\n      email: 'janetMaye@yahoomail.com',\r\n      date: '2011-11-21',\r\n      dept: 'Engineering HQ',\r\n      request: 'Lorem ipsum owjjfndfnmnxnfj Lorem ipsum Lorem',\r\n    };\r\n    chai.request(app)\r\n      .put('/api/v1/users/requests/110')\r\n      .send(data)\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(200);\r\n        Expect(res)\r\n          .to\r\n          .be\r\n          .an('object');\r\n        Expect(res.body.data)\r\n          .to\r\n          .be\r\n          .an('object');\r\n      });\r\n    return done();\r\n  });\r\n\r\n  it('should get an error when a request is not found on user/requests/:requestId  PUT', (done) => {\r\n    chai.request(app)\r\n      .put('/api/v1/users/requests/1100')\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(404);\r\n      });\r\n    return done();\r\n  });\r\n\r\n  it('should delete requests on user/requests/:requestId  DELETE', (done) => {\r\n    chai.request(app)\r\n      .put('/api/v1/users/requests/110')\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(200);\r\n      });\r\n    return done();\r\n  });\r\n\r\n  it('should get an error when a request is not found on user/requests/:requestId  DELETE', (done) => {\r\n    chai.request(app)\r\n      .put('/api/v1/users/requests/1100')\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(404);\r\n      });\r\n    return done();\r\n  });\r\n});\r\n"]}