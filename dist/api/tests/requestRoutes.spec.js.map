{"version":3,"sources":["../../../api/tests/requestRoutes.spec.js"],"names":["server","superTest","agent","app","Expect","chai","expect","use","chaiHttp","global","token","before","done","request","post","send","email","password","end","err","res","body","describe","it","get","set","Authorization","to","be","null","statusCode","equal","an","console","log","data1","name","date","dept","data","put"],"mappings":";;AAAA;;;;AAIA;;;;AAEA;;;;AAEA;;;;AAEA;;;;;;AARA;;AAUA,IAAMA,SAASC,oBAAUC,KAAV,CAAgBC,aAAhB,CAAf;;AAEA,IAAMC,SAASC,eAAKC,MAApB;;AAEAD,eAAKE,GAAL,CAASC,kBAAT;;AAEA;AACAC,OAAOC,KAAP,GAAe,IAAf;AACAC,OAAO,UAACC,IAAD,EAAU;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,iBAAKQ,OAAL,CAAaV,aAAb,EACGW,IADH,CACQ,oBADR,EAEGC,IAFH,CAEQ;AACJC,WAAO,6BADH;AAEJC,cAAU;AAFN,GAFR,EAMGC,GANH,CAMO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBX,WAAOC,KAAP,GAAeU,IAAIC,IAAJ,CAASX,KAAxB;AACAE;AACD,GATH;AAUD,CAvBD;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAU,SAAS,sCAAT,EAAiD,YAAM;AACrDC,KAAG,+CAAH,EAAoD,UAACX,IAAD,EAAU;AAC5DP,mBAAKQ,OAAL,CAAaV,aAAb,EACGqB,GADH,CACO,yBADP,EAEGC,GAFH,CAEO,EAAEC,eAAe,YAAYjB,OAAOC,KAApC,EAFP,EAGGQ,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,aAAOe,GAAP,EAAYQ,EAAZ,CAAeC,EAAf,CAAkBC,IAAlB;AACAzB,aAAOgB,IAAIU,UAAX,EACGH,EADH,CAEGI,KAFH,CAES,GAFT;AAGA3B,aAAOgB,GAAP,EACGO,EADH,CAEGC,EAFH,CAGGI,EAHH,CAGM,QAHN;AAIApB;AACD,KAbH;AAcD,GAfD;;AAiBAW,KAAG,0DAAH,EAA+D,UAACX,IAAD,EAAU;AACvEP,mBAAKQ,OAAL,CAAaV,aAAb,EACGqB,GADH,CACO,2BADP,EAEGC,GAFH,CAEO,EAAEC,eAAe,YAAYjB,OAAOC,KAApC,EAFP,EAGGQ,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,aAAOgB,IAAIU,UAAX,EACGH,EADH,CAEGI,KAFH,CAES,GAFT;AAGA3B,aAAOgB,GAAP,EACGO,EADH,CAEGC,EAFH,CAGGI,EAHH,CAGM,QAHN;AAID,KAXH;AAYApB;AACD,GAdD;;AAgBAW,KAAG,oDAAH,EAAyD,UAACX,IAAD,EAAU;AACjEP,mBAAKQ,OAAL,CAAaV,aAAb,EACGqB,GADH,CACO,6BADP,EAEGC,GAFH,CAEO,EAAEC,eAAe,YAAYjB,OAAOC,KAApC,EAFP,EAGGQ,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBa,cAAQC,GAAR,CAAYd,IAAIU,UAAhB;AACA1B,aAAOgB,IAAIU,UAAX,EACGH,EADH,CAEGI,KAFH,CAES,GAFT;AAGD,KARH;AASAnB;AACD,GAXD;;AAaA,MAAMuB,QAAQ;AACZC,UAAM,WADM;AAEZpB,WAAO,yBAFK;AAGZqB,UAAM,YAHM;AAIZC,UAAM,gBAJM;AAKZzB,aAAS;AALG,GAAd;;AAQAU,KAAG,oDAAH,EAAyD,UAACX,IAAD,EAAU;;AAEjEP,mBAAKQ,OAAL,CAAaV,aAAb,EACGW,IADH,CACQ,wBADR,EAEGW,GAFH,CAEO,EAAEC,eAAe,YAAYjB,OAAOC,KAApC,EAFP,EAGGK,IAHH,CAGQoB,KAHR,EAIGjB,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,aAAOgB,IAAIU,UAAX,EACGH,EADH,CAEGI,KAFH,CAES,GAFT;AAGD,KARH;AASAnB;AACD,GAZD;;AAcAW,KAAG,wEAAH,EAA6E,UAACX,IAAD,EAAU;AACrF,QAAM2B,OAAO;AACXH,YAAM,WADK;AAEXpB,aAAO,yBAFI;AAGXsB,YAAM,gBAHK;AAIXzB,eAAS;AAJE,KAAb;;AAOAR,mBAAKQ,OAAL,CAAaV,aAAb,EACGW,IADH,CACQ,yBADR,EAEGW,GAFH,CAEO,EAAEC,eAAe,YAAYjB,OAAOC,KAApC,EAFP,EAGGK,IAHH,CAGQoB,KAHR,EAIGjB,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,aAAOgB,IAAIU,UAAX,EACGH,EADH,CAEGI,KAFH,CAES,GAFT;AAGD,KARH;AASAnB;AACD,GAlBD;;AAqBAW,KAAG,gEAAH,EAAqE,UAACX,IAAD,EAAU;AAC7E,QAAM2B,OAAO;AACXH,YAAM,WADK;AAEXpB,aAAO,yBAFI;AAGXsB,YAAM,gBAHK;AAIXzB,eAAS;AAJE,KAAb;AAMAR,mBAAKQ,OAAL,CAAaV,aAAb,EACGqC,GADH,CACO,2BADP,EAEGf,GAFH,CAEO,EAAEC,eAAe,YAAYjB,OAAOC,KAApC,EAFP,EAGGK,IAHH,CAGQwB,IAHR,EAIGrB,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,aAAOgB,IAAIU,UAAX,EACGH,EADH,CAEGI,KAFH,CAES,GAFT;AAGA3B,aAAOgB,GAAP,EACGO,EADH,CAEGC,EAFH,CAGGI,EAHH,CAGM,QAHN;AAIA5B,aAAOgB,IAAIC,IAAJ,CAASkB,IAAhB,EACGZ,EADH,CAEGC,EAFH,CAGGI,EAHH,CAGM,QAHN;AAID,KAhBH;AAiBApB;AACD,GAzBD;;AA2BAW,KAAG,kFAAH,EAAuF,UAACX,IAAD,EAAU;AAC/FP,mBAAKQ,OAAL,CAAaV,aAAb,EACGqC,GADH,CACO,6BADP,EAEGf,GAFH,CAEO,EAAEC,eAAe,YAAYjB,OAAOC,KAApC,EAFP,EAGGQ,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,aAAOgB,IAAIU,UAAX,EACGH,EADH,CAEGI,KAFH,CAES,GAFT;AAGD,KAPH;AAQAnB;AACD,GAVD;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAxJD","file":"requestRoutes.spec.js","sourcesContent":["import chai from 'chai';\r\n\r\n// import { Pool } from 'pg';\r\n\r\nimport db from '../models/userModel';\r\n\r\nimport superTest from 'supertest';\r\n\r\nimport chaiHttp from 'chai-http';\r\n\r\nimport app from '../../app';\r\n\r\nconst server = superTest.agent(app);\r\n\r\nconst Expect = chai.expect;\r\n\r\nchai.use(chaiHttp);\r\n\r\n// let token = null;\r\nglobal.token = null;\r\nbefore((done) => {\r\n  // db.query('CREATE DATABASE IF EXISTS \"testRunning\";', (err, results) => {\r\n  //   if (err) {\r\n  //     return err;\r\n  //   }\r\n  //   db.query('CREATE TABLE users(id SERIAL PRIMARY KEY, name VARCHAR(40) NOT NULL, password VARCHAR(40) NOT NULL, email VARCHAR(40) NOT NULL, admin BOOLEAN DEFAULT true', (err, results) => {\r\n  //     if (err) {\r\n  //       return err;\r\n  //     }\r\n  //     db.end();\r\n  //     done();\r\n  //   });\r\n  // });\r\n  chai.request(app)\r\n    .post('/api/v1/auth/login')\r\n    .send({\r\n      email: 'nwokeochavicto22r@gmail.com',\r\n      password: '123456',\r\n    })\r\n    .end((err, res) => {\r\n      global.token = res.body.token;\r\n      done();\r\n    });\r\n});\r\n\r\n\r\n// afterEach((done) => {\r\n//   pool.query('DROP DATABASE \"testRunning\"', (err, results) => {\r\n//     if (err) {\r\n//       return err;\r\n//     }\r\n//     pool.end();\r\n//   });\r\n//   return done();\r\n// });\r\n\r\ndescribe('USER REQUEST CONTROLLER API ENDPOINT', () => {\r\n  it('Should list ALL requests on /user/request GET', (done) => {\r\n    chai.request(app)\r\n      .get('/api/v1/users/requests/')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .end((err, res) => {\r\n        Expect(err).to.be.null;\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(200);\r\n        Expect(res)\r\n          .to\r\n          .be\r\n          .an('object');\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('Should list ONE requests on /user/request/:requestId GET', (done) => {\r\n    chai.request(app)\r\n      .get('/api/v1/users/requests/10')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(200);\r\n        Expect(res)\r\n          .to\r\n          .be\r\n          .an('object');\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('Should throw a 404 error when request is not found', (done) => {\r\n    chai.request(app)\r\n      .get('/api/v1/users/requests/1100')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .end((err, res) => {\r\n        console.log(res.statusCode);\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(404);\r\n      });\r\n    done();\r\n  });\r\n\r\n  const data1 = {\r\n    name: 'Janet May',\r\n    email: 'janetMaye@yahoomail.com',\r\n    date: '2011-11-21',\r\n    dept: 'Engineering HQ',\r\n    request: 'Lorem ipsum owjjfndfnmnxnfj Lorem ipsum Lorem',\r\n  };\r\n\r\n  it('should create a SINGLE request user/requests/ POST', (done) => {\r\n\r\n    chai.request(app)\r\n      .post('/api/v1/users/requests')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .send(data1)\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(201);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should get an error when a bad request is sent on user/requests/  POST', (done) => {\r\n    const data = {\r\n      name: 'Janet May',\r\n      email: 'janetMaye@yahoomail.com',\r\n      dept: 'Engineering HQ',\r\n      request: 'Lorem ipsum',\r\n    };\r\n\r\n    chai.request(app)\r\n      .post('/api/v1/users/requests/')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .send(data1)\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(400);\r\n      });\r\n    done();\r\n  });\r\n\r\n\r\n  it('should update a SINGLE request on user/requests/:requestId PUT', (done) => {\r\n    const data = {\r\n      name: 'Janet May',\r\n      email: 'janetMaye@yahoomail.com',\r\n      dept: 'Engineering HQ',\r\n      request: 'Lorem ipsum owjjfndfnmnxnfj Lorem ipsum Lorem',\r\n    };\r\n    chai.request(app)\r\n      .put('/api/v1/users/requests/10')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .send(data)\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(200);\r\n        Expect(res)\r\n          .to\r\n          .be\r\n          .an('object');\r\n        Expect(res.body.data)\r\n          .to\r\n          .be\r\n          .an('object');\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should get an error when a request is not found on user/requests/:requestId  PUT', (done) => {\r\n    chai.request(app)\r\n      .put('/api/v1/users/requests/1100')\r\n      .set({ Authorization: 'Bearer ' + global.token })\r\n      .end((err, res) => {\r\n        Expect(res.statusCode)\r\n          .to\r\n          .equal(404);\r\n      });\r\n    done();\r\n  });\r\n\r\n  // it('should delete requests on user/requests/:requestId  DELETE', (done) => {\r\n  //   chai.request(app)\r\n  //     .put('/api/v1/users/requests/10')\r\n  //     .set({ Authorization: 'Bearer ' + global.token })\r\n  //     .end((err, res) => {\r\n  //       Expect(res.statusCode)\r\n  //         .to.equal(200);\r\n  //       done();\r\n  //     });\r\n  // });\r\n  //\r\n  //\r\n  // it('should get an error when a request is not found on user/requests/:requestId  DELETE', (done) => {\r\n  //   chai.request(app)\r\n  //     .put('/api/v1/users/requests/1100')\r\n  //     .set({ Authorization: 'Bearer ' + global.token })\r\n  //     .end((err, res) => {\r\n  //       Expect(res.statusCode)\r\n  //         .to\r\n  //         .equal(404);\r\n  //     });\r\n  //   done();\r\n  // });\r\n});\r\n"]}