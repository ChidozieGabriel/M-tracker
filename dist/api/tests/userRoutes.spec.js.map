{"version":3,"sources":["../../../api/tests/userRoutes.spec.js"],"names":["server","superTest","agent","app","Expect","chai","expect","use","chaiHttp","describe","it","done","newUser","name","email","password","post","send","end","err","res","to","equal","statusCode","body","have","property","auth","be","User"],"mappings":"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","file":"userRoutes.spec.js","sourcesContent":["import chai from 'chai';\r\n\r\nimport chaiHttp from 'chai-http';\r\n\r\n\r\nimport db from '../models/userModel';\r\n\r\nimport superTest from 'supertest';\r\n\r\nimport app from '../../server';\r\n\r\nconst server = superTest.agent(app);\r\n\r\nconst Expect = chai.expect;\r\n\r\nchai.use(chaiHttp);\r\n\r\ndescribe('USER CONTROLLER TESTS', () => {\r\n  describe('User sign up', () => {\r\n    it('Should return a token and a status code of 201', (done) => {\r\n      const newUser = {\r\n        name: 'John',\r\n        email: 'example2@gmail.com',\r\n        password: '123456',\r\n      };\r\n      server\r\n        .post('/api/v1/auth/signup')\r\n        .send(newUser)\r\n        .end((err, res) => {\r\n          Expect(err).to.equal(null);\r\n          Expect(res.statusCode).to.equal(201);\r\n          Expect(res.body[0]).to.have.property('token');\r\n          Expect(res.body[0].auth).to.be.equal(true);\r\n        });\r\n      return done();\r\n    });\r\n\r\n    it('Should return a status code of 409', (done) => {\r\n      const newUser = {\r\n        name: 'John doe',\r\n        email: 'example@gmail.com',\r\n        password: '123456',\r\n      };\r\n      server\r\n        .post('/api/v1/auth/signup')\r\n        .send(newUser)\r\n        .end((err, res) => {\r\n          Expect(err).to.equal(null);\r\n          Expect(res.statusCode).to.equal(409);\r\n        });\r\n      return done();\r\n    });\r\n\r\n    it('Should return a status code of 500', (done) => {\r\n      const newUser = {\r\n        name: 'John doe',\r\n        email: 12456874,\r\n        password: '123456',\r\n      };\r\n      server\r\n        .post('/api/v1/auth/signup')\r\n        .send(newUser)\r\n        .end((err, res) => {\r\n          Expect(res.statusCode).to.equal(400);\r\n          Expect(res.body).to.have.property('error');\r\n        });\r\n      return done();\r\n    });\r\n  });\r\n\r\n  describe('POST User Login( /Auth/login)', () => {\r\n    it('Should return a token', (done) => {\r\n      const User = {\r\n        email: 'example@gmail.com',\r\n        password: '123456',\r\n      };\r\n      server\r\n        .post('/api/v1/auth/login')\r\n        .send(User)\r\n        .end((err, res) => {\r\n          Expect(err).to.equal(null);\r\n          Expect(res.statusCode).to.equal(200);\r\n          Expect(res.body[0]).to.be.have.property('token');\r\n        });\r\n      done();\r\n    });\r\n\r\n    it('Should return a status code of 401 for incorrect password and email', (done) => {\r\n      const User = {\r\n        email: 'example21233@gmail.com',\r\n        password: '12345',\r\n      };\r\n      server\r\n        .post('/api/v1/auth/login')\r\n        .send(User)\r\n        .end((err, res) => {\r\n          Expect(res.statusCode).to.equal(401);\r\n        });\r\n      return done();\r\n    });\r\n\r\n    it('Should return a status code of 401 for invalid email', (done) => {\r\n      const User = {\r\n        email: 12,\r\n        password: '1234567',\r\n      };\r\n      server\r\n        .post('/api/v1/auth/login')\r\n        .send(User)\r\n        .end((err, res) => {\r\n          Expect(res.statusCode).to.equal(400);\r\n        });\r\n      return done();\r\n    });\r\n\r\n    it('Should return a status code of 401 for incorrect password', (done) => {\r\n      const User = {\r\n        email: 'example@gmail.com',\r\n        password: '1234567',\r\n      };\r\n      server\r\n        .post('/api/v1/auth/login')\r\n        .send(User)\r\n        .end((err, res) => {\r\n          Expect(err).to.equal(null);\r\n          Expect(res.statusCode).to.equal(401);\r\n        });\r\n      return done();\r\n    });\r\n  });\r\n});\r\n"]}