{"version":3,"sources":["../../../api/tests/userRoutes.spec.js"],"names":["server","superTest","agent","app","Expect","chai","expect","describe","it","done","newUser","name","email","password","post","send","end","err","res","to","be","null","statusCode","equal","body","have","property","auth","User"],"mappings":";;AAAA;;;;AAEA;;;;AAEA;;;;;;AAGA,IAAMA,SAASC,oBAAUC,KAAV,CAAgBC,aAAhB,CAAf;;AAEA,IAAMC,SAASC,eAAKC,MAApB;;AAEAC,SAAS,uBAAT,EAAkC,YAAM;AACtCA,WAAS,eAAT,EAA0B,YAAM;AAC9BC,OAAG,gBAAH,EAAqB,UAACC,IAAD,EAAU;AAC7B,UAAMC,UAAU;AACdC,cAAM,UADQ;AAEdC,eAAO,mBAFO;AAGdC,kBAAU;AAHI,OAAhB;AAKAb,aACGc,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQL,OAFR,EAGGM,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBd,eAAOa,GAAP,EAAYE,EAAZ,CAAeC,EAAf,CAAkBC,IAAlB;AACAjB,eAAOc,IAAII,UAAX,EAAuBH,EAAvB,CAA0BI,KAA1B,CAAgC,GAAhC;AACAnB,eAAOc,IAAIM,IAAJ,CAAS,CAAT,CAAP,EAAoBL,EAApB,CAAuBC,EAAvB,CAA0BK,IAA1B,CAA+BC,QAA/B,CAAwC,MAAxC;AACAtB,eAAOc,IAAIM,IAAJ,CAAS,CAAT,CAAP,EAAoBL,EAApB,CAAuBC,EAAvB,CAA0BK,IAA1B,CAA+BC,QAA/B,CAAwC,OAAxC;AACAtB,eAAOc,IAAIM,IAAJ,CAAS,CAAT,EAAYG,IAAnB,EAAyBR,EAAzB,CAA4BC,EAA5B,CAA+BG,KAA/B,CAAqC,KAArC;AACD,OATH;AAUA,aAAOd,MAAP;AACD,KAjBD;AAkBD,GAnBD;;AAqBAF,WAAS,+BAAT,EAA0C,YAAM;AAC9CC,OAAG,wBAAH,EAA6B,UAACC,IAAD,EAAU;;AAErC,UAAMmB,OAAO;AACXhB,eAAO,2BADI;AAEXC,kBAAU;AAFC,OAAb;;AAKAb,aACGc,IADH,CACQ,oBADR,EAEGC,IAFH,CAEQa,IAFR,EAGGZ,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBd,eAAOa,GAAP,EAAYE,EAAZ,CAAeC,EAAf,CAAkBC,IAAlB;AACAjB,eAAOc,IAAII,UAAX,EAAuBH,EAAvB,CAA0BI,KAA1B,CAAgC,GAAhC;AACAnB,eAAOc,IAAIM,IAAJ,CAAS,CAAT,CAAP,EAAoBL,EAApB,CAAuBC,EAAvB,CAA0BK,IAA1B,CAA+BC,QAA/B,CAAwC,MAAxC;AACAtB,eAAOc,IAAIM,IAAJ,CAAS,CAAT,CAAP,EAAoBL,EAApB,CAAuBC,EAAvB,CAA0BK,IAA1B,CAA+BC,QAA/B,CAAwC,OAAxC;AACD,OARH;AASA,aAAOjB,MAAP;AACD,KAjBD;AAkBD,GAnBD;AAoBD,CA1CD","file":"userRoutes.spec.js","sourcesContent":["import chai from 'chai';\r\n\r\nimport superTest from 'supertest';\r\n\r\nimport app from '../../app';\r\n\r\n\r\nconst server = superTest.agent(app);\r\n\r\nconst Expect = chai.expect;\r\n\r\ndescribe('USER CONTROLLER TESTS', () => {\r\n  describe('User sign up)', () => {\r\n    it('Should return ', (done) => {\r\n      const newUser = {\r\n        name: 'John doe',\r\n        email: 'example@gmail.com',\r\n        password: '123456',\r\n      };\r\n      server\r\n        .post('/api/v1/auth/signup')\r\n        .send(newUser)\r\n        .end((err, res) => {\r\n          Expect(err).to.be.null;\r\n          Expect(res.statusCode).to.equal(201);\r\n          Expect(res.body[0]).to.be.have.property('auth');\r\n          Expect(res.body[0]).to.be.have.property('token');\r\n          Expect(res.body[0].auth).to.be.equal(false);\r\n        });\r\n      return done();\r\n    });\r\n  });\r\n\r\n  describe('POST User Login( /Auth/login)', () => {\r\n    it('Should get status code', (done) => {\r\n\r\n      const User = {\r\n        email: 'nwokeochavictor@gmail.com',\r\n        password: '123456',\r\n      };\r\n\r\n      server\r\n        .post('/api/v1/auth/login')\r\n        .send(User)\r\n        .end((err, res) => {\r\n          Expect(err).to.be.null;\r\n          Expect(res.statusCode).to.equal(200);\r\n          Expect(res.body[0]).to.be.have.property('auth');\r\n          Expect(res.body[0]).to.be.have.property('token');\r\n        });\r\n      return done();\r\n    });\r\n  });\r\n});\r\n"]}