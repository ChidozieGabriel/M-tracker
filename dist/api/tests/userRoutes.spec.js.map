{"version":3,"sources":["../../../api/tests/userRoutes.spec.js"],"names":["server","superTest","agent","app","Expect","chai","expect","before","done","db","query","err","results","console","log","describe","it","newUser","name","email","password","post","send","end","res","to","be","null","statusCode","equal","body","have","property","auth","User"],"mappings":";;AAAA;;;;AAEA;;;;AAGA;;;;AAEA;;;;;;AAEA,IAAMA,SAASC,oBAAUC,KAAV,CAAgBC,aAAhB,CAAf;;AAEA,IAAMC,SAASC,eAAKC,MAApB;;AAEAC,OAAO,UAACC,IAAD,EAAU;AACfC,sBAAGC,KAAH,CAAS,4DAAT,EAAuE,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACvF,QAAID,GAAJ,EAAS;AACP,aAAOA,GAAP;AACD;AACDE,YAAQC,GAAR,CAAYF,OAAZ;AACD,GALD;AAMAJ;AACD,CARD;;AAWAO,SAAS,uBAAT,EAAkC,YAAM;AACtCA,WAAS,eAAT,EAA0B,YAAM;AAC9BC,OAAG,gBAAH,EAAqB,UAACR,IAAD,EAAU;AAC7B,UAAMS,UAAU;AACdC,cAAM,UADQ;AAEdC,eAAO,mBAFO;AAGdC,kBAAU;AAHI,OAAhB;AAKApB,aACGqB,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQL,OAFR,EAGGM,GAHH,CAGO,UAACZ,GAAD,EAAMa,GAAN,EAAc;AACjBpB,eAAOO,GAAP,EAAYc,EAAZ,CAAeC,EAAf,CAAkBC,IAAlB;AACAvB,eAAOoB,IAAII,UAAX,EAAuBH,EAAvB,CAA0BI,KAA1B,CAAgC,GAAhC;AACAzB,eAAOoB,IAAIM,IAAJ,CAAS,CAAT,CAAP,EAAoBL,EAApB,CAAuBC,EAAvB,CAA0BK,IAA1B,CAA+BC,QAA/B,CAAwC,OAAxC;AACA5B,eAAOoB,IAAIM,IAAJ,CAAS,CAAT,EAAYG,IAAnB,EACGR,EADH,CAEGC,EAFH,CAGGG,KAHH,CAGS,KAHT;AAID,OAXH;AAYA,aAAOrB,MAAP;AACD,KAnBD;AAoBD,GArBD;;AAuBAO,WAAS,+BAAT,EAA0C,YAAM;AAC9CC,OAAG,wBAAH,EAA6B,UAACR,IAAD,EAAU;AACrC,UAAM0B,OAAO;AACXf,eAAO,2BADI;AAEXC,kBAAU;AAFC,OAAb;AAIApB,aACGqB,IADH,CACQ,oBADR,EAEGC,IAFH,CAEQY,IAFR,EAGGX,GAHH,CAGO,UAACZ,GAAD,EAAMa,GAAN,EAAc;AACjBX,gBAAQC,GAAR,CAAYU,IAAIM,IAAhB;AACA1B,eAAOO,GAAP,EAAYc,EAAZ,CAAeC,EAAf,CAAkBC,IAAlB;AACAvB,eAAOoB,IAAII,UAAX,EACGH,EADH,CAEGI,KAFH,CAES,GAFT;AAGAzB,eAAOoB,IAAIM,IAAJ,CAAS,CAAT,CAAP,EACGL,EADH,CAEGC,EAFH,CAGGK,IAHH,CAIGC,QAJH,CAIY,OAJZ;AAKD,OAdH;AAeA,aAAOxB,MAAP;AACD,KArBD;;AAuBAQ,OAAG,0BAAH,EAA+B,UAACR,IAAD,EAAU;AACvC,UAAM0B,OAAO;AACXf,eAAO,2BADI;AAEXC,kBAAU;AAFC,OAAb;;AAMApB,aACGqB,IADH,CACQ,oBADR,EAEGC,IAFH,CAEQY,IAFR,EAGGX,GAHH,CAGO,UAACZ,GAAD,EAAMa,GAAN,EAAc;AACjBX,gBAAQC,GAAR,CAAYU,IAAIM,IAAhB;AACA1B,eAAOO,GAAP,EAAYc,EAAZ,CAAeC,EAAf,CAAkBC,IAAlB;AACAvB,eAAOoB,IAAII,UAAX,EACGH,EADH,CAEGI,KAFH,CAES,GAFT;AAGAzB,eAAOoB,IAAIM,IAAJ,CAAS,CAAT,CAAP,EACGL,EADH,CAEGC,EAFH,CAGGK,IAHH,CAIGC,QAJH,CAIY,OAJZ;AAKD,OAdH;AAeA,aAAOxB,MAAP;AACD,KAvBD;AAwBD,GAhDD;AAiDD,CAzED","file":"userRoutes.spec.js","sourcesContent":["import chai from 'chai';\r\n\r\nimport db from '../models/userModel';\r\n\r\n\r\nimport superTest from 'supertest';\r\n\r\nimport app from '../../app';\r\n\r\nconst server = superTest.agent(app);\r\n\r\nconst Expect = chai.expect;\r\n\r\nbefore((done) => {\r\n  db.query('SELECT FROM users WHERE email=\"nwokeochavictor@gmail.com;\"', (err, results) => {\r\n    if (err) {\r\n      return err;\r\n    }\r\n    console.log(results);\r\n  });\r\n  done();\r\n});\r\n\r\n\r\ndescribe('USER CONTROLLER TESTS', () => {\r\n  describe('User sign up)', () => {\r\n    it('Should return ', (done) => {\r\n      const newUser = {\r\n        name: 'John doe',\r\n        email: 'example@gmail.com',\r\n        password: '123456',\r\n      };\r\n      server\r\n        .post('/api/v1/auth/signup')\r\n        .send(newUser)\r\n        .end((err, res) => {\r\n          Expect(err).to.be.null;\r\n          Expect(res.statusCode).to.equal(201);\r\n          Expect(res.body[0]).to.be.have.property('token');\r\n          Expect(res.body[0].auth)\r\n            .to\r\n            .be\r\n            .equal(false);\r\n        });\r\n      return done();\r\n    });\r\n  });\r\n\r\n  describe('POST User Login( /Auth/login)', () => {\r\n    it('Should get status code', (done) => {\r\n      const User = {\r\n        email: 'nwokeochavictor@gmail.com',\r\n        password: '123456',\r\n      };\r\n      server\r\n        .post('/api/v1/auth/login')\r\n        .send(User)\r\n        .end((err, res) => {\r\n          console.log(res.body);\r\n          Expect(err).to.be.null;\r\n          Expect(res.statusCode)\r\n            .to\r\n            .equal(200);\r\n          Expect(res.body[0])\r\n            .to\r\n            .be\r\n            .have\r\n            .property('token');\r\n        });\r\n      return done();\r\n    });\r\n\r\n    it('Should get a status code', (done) => {\r\n      const User = {\r\n        email: 'nwokeochavictor@gmail.com',\r\n        password: '123456',\r\n      };\r\n\r\n\r\n      server\r\n        .post('/api/v1/auth/login')\r\n        .send(User)\r\n        .end((err, res) => {\r\n          console.log(res.body);\r\n          Expect(err).to.be.null;\r\n          Expect(res.statusCode)\r\n            .to\r\n            .equal(200);\r\n          Expect(res.body[0])\r\n            .to\r\n            .be\r\n            .have\r\n            .property('token');\r\n        });\r\n      return done();\r\n    });\r\n  });\r\n});\r\n"]}