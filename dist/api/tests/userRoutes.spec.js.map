{"version":3,"sources":["../../../api/tests/userRoutes.spec.js"],"names":["server","superTest","agent","app","Expect","chai","expect","use","chaiHttp","describe","it","done","newUser","name","email","password","post","send","end","err","res","to","be","null","statusCode","equal","body","have","property","auth","User"],"mappings":";;AAAA;;;;AAEA;;;;AAGA;;;;AAEA;;;;AAEA;;;;;;AAEA,IAAMA,SAASC,oBAAUC,KAAV,CAAgBC,gBAAhB,CAAf;;AAEA,IAAMC,SAASC,eAAKC,MAApB;;AAEAD,eAAKE,GAAL,CAASC,kBAAT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAC,SAAS,uBAAT,EAAkC,YAAM;AACtCA,WAAS,eAAT,EAA0B,YAAM;AAC9BC,OAAG,gBAAH,EAAqB,UAACC,IAAD,EAAU;AAC7B,UAAMC,UAAU;AACdC,cAAM,UADQ;AAEdC,eAAO,mBAFO;AAGdC,kBAAU;AAHI,OAAhB;AAKAf,aACGgB,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQL,OAFR,EAGGM,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOe,GAAP,EAAYE,EAAZ,CAAeC,EAAf,CAAkBC,IAAlB;AACAnB,eAAOgB,IAAII,UAAX,EACGH,EADH,CAEGI,KAFH,CAES,GAFT;AAGArB,eAAOgB,IAAIM,IAAJ,CAAS,CAAT,CAAP,EACGL,EADH,CAEGC,EAFH,CAGGK,IAHH,CAIGC,QAJH,CAIY,OAJZ;AAKAxB,eAAOgB,IAAIM,IAAJ,CAAS,CAAT,EAAYG,IAAnB,EACGR,EADH,CAEGC,EAFH,CAGGG,KAHH,CAGS,KAHT;AAID,OAjBH;AAkBA,aAAOd,MAAP;AACD,KAzBD;AA0BD,GA3BD;;AA6BAF,WAAS,+BAAT,EAA0C,YAAM;AAC9CC,OAAG,uBAAH,EAA4B,UAACC,IAAD,EAAU;AACpC,UAAMmB,OAAO;AACXhB,eAAO,2BADI;AAEXC,kBAAU;AAFC,OAAb;AAIAf,aACGgB,IADH,CACQ,oBADR,EAEGC,IAFH,CAEQa,IAFR,EAGGZ,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOe,GAAP,EAAYE,EAAZ,CAAeC,EAAf,CAAkBC,IAAlB;AACAnB,eAAOgB,IAAII,UAAX,EAAuBH,EAAvB,CAA0BI,KAA1B,CAAgC,GAAhC;AACArB,eAAOgB,IAAIM,IAAJ,CAAS,CAAT,CAAP,EAAoBL,EAApB,CAAuBC,EAAvB,CAA0BK,IAA1B,CAA+BC,QAA/B,CAAwC,OAAxC;AACD,OAPH;AAQAjB;AACD,KAdD;AAeD,GAhBD;AAiBD,CA/CD","file":"userRoutes.spec.js","sourcesContent":["import chai from 'chai';\r\n\r\nimport chaiHttp from 'chai-http';\r\n\r\n\r\nimport db from '../models/userModel';\r\n\r\nimport superTest from 'supertest';\r\n\r\nimport app from '../../server';\r\n\r\nconst server = superTest.agent(app);\r\n\r\nconst Expect = chai.expect;\r\n\r\nchai.use(chaiHttp);\r\n\r\n// before((done) => {\r\n//   db.query('SELECT FROM users WHERE email=\"nwokeochavictor@gmail.com;\"', (err, results) => {\r\n//     if (err) {\r\n//       return err;\r\n//     }\r\n//     console.log(results);\r\n//   });\r\n//   done();\r\n// });\r\n\r\n\r\ndescribe('USER CONTROLLER TESTS', () => {\r\n  describe('User sign up)', () => {\r\n    it('Should return ', (done) => {\r\n      const newUser = {\r\n        name: 'John doe',\r\n        email: 'example@gmail.com',\r\n        password: '123456',\r\n      };\r\n      server\r\n        .post('/api/v1/auth/signup')\r\n        .send(newUser)\r\n        .end((err, res) => {\r\n          Expect(err).to.be.null;\r\n          Expect(res.statusCode)\r\n            .to\r\n            .equal(201);\r\n          Expect(res.body[0])\r\n            .to\r\n            .be\r\n            .have\r\n            .property('token');\r\n          Expect(res.body[0].auth)\r\n            .to\r\n            .be\r\n            .equal(false);\r\n        });\r\n      return done();\r\n    });\r\n  });\r\n\r\n  describe('POST User Login( /Auth/login)', () => {\r\n    it('Should return a token', (done) => {\r\n      const User = {\r\n        email: 'nwokeochavictor@gmail.com',\r\n        password: '123456',\r\n      };\r\n      server\r\n        .post('/api/v1/auth/login')\r\n        .send(User)\r\n        .end((err, res) => {\r\n          Expect(err).to.be.null;\r\n          Expect(res.statusCode).to.equal(200);\r\n          Expect(res.body[0]).to.be.have.property('token');\r\n        });\r\n      done();\r\n    });\r\n  });\r\n});\r\n"]}