{"version":3,"sources":["../../../api/tests/adminRoutes.spec.js"],"names":["server","superTest","agent","app","Expect","chai","expect","use","chaiHttp","global","tok","before","done","request","post","send","email","password","end","err","res","body","token","describe","it","get","set","Authorization","statusCode","to","equal","be","an","put"],"mappings":";;AAAA;;;;AAMA;;;;AAEA;;;;AAEA;;;;;;AAEA,IAAMA,SAASC,oBAAUC,KAAV,CAAgBC,aAAhB,CAAf;;AAVA;;AAEA;;AAUA,IAAMC,SAASC,eAAKC,MAApB;;AAEAD,eAAKE,GAAL,CAASC,kBAAT;;AAEA;AACAC,OAAOC,GAAP,GAAa,IAAb;AACAC,OAAO,UAACC,IAAD,EAAU;AACfP,iBAAKQ,OAAL,CAAaV,aAAb,EACGW,IADH,CACQ,oBADR,EAEGC,IAFH,CAEQ;AACJC,WAAO,iBADH;AAEJC,cAAU;AAFN,GAFR,EAMGC,GANH,CAMO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBX,WAAOC,GAAP,GAAaU,IAAIC,IAAJ,CAASC,KAAtB;AACAV;AACD,GATH;AAUD,CAXD;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAW,SAAS,cAAT,EAAyB,YAAM;AAC7BC,KAAG,0BAAH,EAA+B,UAACZ,IAAD,EAAU;AACvCP,mBAAKQ,OAAL,CAAaV,aAAb,EACGsB,GADH,CACO,mBADP,EAEGC,GAFH,CAEO,EAAEC,eAAe,YAAYlB,OAAOC,GAApC,EAFP,EAGGQ,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,aAAOgB,IAAIQ,UAAX,EAAuBC,EAAvB,CAA0BC,KAA1B,CAAgC,GAAhC;AACA1B,aAAOgB,GAAP,EAAYS,EAAZ,CAAeE,EAAf,CAAkBC,EAAlB,CAAqB,QAArB;AACD,KANH;AAOApB;AACD,GATD;;AAYAY,KAAG,+BAAH,EAAoC,UAACZ,IAAD,EAAU;AAC5CP,mBAAKQ,OAAL,CAAaV,aAAb,EACG8B,GADH,CACO,4BADP,EAEGP,GAFH,CAEO,EAAEC,eAAe,YAAYlB,OAAOC,GAApC,EAFP,EAGGQ,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,aAAOgB,IAAIQ,UAAX,EAAuBC,EAAvB,CAA0BC,KAA1B,CAAgC,GAAhC;AACD,KALH;AAMAlB;AACD,GARD;;AAUAY,KAAG,kCAAH,EAAuC,UAACZ,IAAD,EAAU;AAC/CP,mBAAKQ,OAAL,CAAaV,aAAb,EACG8B,GADH,CACO,+BADP,EAEGP,GAFH,CAEO,EAAEC,eAAe,YAAYlB,OAAOC,GAApC,EAFP,EAGGQ,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,aAAOgB,IAAIQ,UAAX,EAAuBC,EAAvB,CAA0BC,KAA1B,CAAgC,GAAhC;AACD,KALH;AAMAlB;AACD,GARD;;AAUAY,KAAG,+BAAH,EAAoC,UAACZ,IAAD,EAAU;AAC5CP,mBAAKQ,OAAL,CAAaV,aAAb,EACG8B,GADH,CACO,4BADP,EAEGP,GAFH,CAEO,EAAEC,eAAe,YAAYlB,OAAOC,GAApC,EAFP,EAGGQ,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,aAAOgB,IAAIQ,UAAX,EAAuBC,EAAvB,CAA0BC,KAA1B,CAAgC,GAAhC;AACD,KALH;AAMAlB;AACD,GARD;AASD,CA1CD","file":"adminRoutes.spec.js","sourcesContent":["import chai from 'chai';\r\n\r\n// import { Pool } from 'pg';\r\n\r\n// import db from '../models/userModel';\r\n\r\nimport superTest from 'supertest';\r\n\r\nimport chaiHttp from 'chai-http';\r\n\r\nimport app from '../../app';\r\n\r\nconst server = superTest.agent(app);\r\n\r\nconst Expect = chai.expect;\r\n\r\nchai.use(chaiHttp);\r\n\r\n// let token = null;\r\nglobal.tok = null;\r\nbefore((done) => {\r\n  chai.request(app)\r\n    .post('/api/v1/auth/login')\r\n    .send({\r\n      email: 'admin@admin.com',\r\n      password: '123456',\r\n    })\r\n    .end((err, res) => {\r\n      global.tok = res.body.token;\r\n      done();\r\n    });\r\n});\r\n\r\n\r\n// afterEach((done) => {\r\n//   pool.query('DROP DATABASE \"testRunning\"', (err, results) => {\r\n//     if (err) {\r\n//       return err;\r\n//     }\r\n//     pool.end();\r\n//   });\r\n//   return done();\r\n// });\r\n\r\ndescribe('ADMIN ROUTES', () => {\r\n  it('Should list ALL requests', (done) => {\r\n    chai.request(app)\r\n      .get('/api/v1/requests/')\r\n      .set({ Authorization: 'Bearer ' + global.tok })\r\n      .end((err, res) => {\r\n        Expect(res.statusCode).to.equal(200);\r\n        Expect(res).to.be.an('object');\r\n      });\r\n    done();\r\n  });\r\n\r\n\r\n  it('Should list approve a request', (done) => {\r\n    chai.request(app)\r\n      .put('/api/v1/requests/1/approve')\r\n      .set({ Authorization: 'Bearer ' + global.tok })\r\n      .end((err, res) => {\r\n        Expect(res.statusCode).to.equal(200);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('Should list Disapprove a request', (done) => {\r\n    chai.request(app)\r\n      .put('/api/v1/requests/1/disapprove')\r\n      .set({ Authorization: 'Bearer ' + global.tok })\r\n      .end((err, res) => {\r\n        Expect(res.statusCode).to.equal(200);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('Should list Resolve a request', (done) => {\r\n    chai.request(app)\r\n      .put('/api/v1/requests/1/resolve')\r\n      .set({ Authorization: 'Bearer ' + global.tok })\r\n      .end((err, res) => {\r\n        Expect(res.statusCode).to.equal(200);\r\n      });\r\n    done();\r\n  });\r\n});\r\n"]}